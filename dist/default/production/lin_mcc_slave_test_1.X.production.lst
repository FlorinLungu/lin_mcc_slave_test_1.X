

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 12 22:00:49 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext1,local,class=CONST,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 1.41
    68                           ; Generated 25/01/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F1825 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000E                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  008C                     	;# 
   130  008E                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0098                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009B                     	;# 
   142  009C                     	;# 
   143  009D                     	;# 
   144  009E                     	;# 
   145  010C                     	;# 
   146  010E                     	;# 
   147  0111                     	;# 
   148  0112                     	;# 
   149  0113                     	;# 
   150  0114                     	;# 
   151  0115                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  0118                     	;# 
   155  0119                     	;# 
   156  011A                     	;# 
   157  011B                     	;# 
   158  011D                     	;# 
   159  011E                     	;# 
   160  018C                     	;# 
   161  018E                     	;# 
   162  0191                     	;# 
   163  0191                     	;# 
   164  0192                     	;# 
   165  0193                     	;# 
   166  0193                     	;# 
   167  0193                     	;# 
   168  0194                     	;# 
   169  0195                     	;# 
   170  0196                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019C                     	;# 
   176  019D                     	;# 
   177  019E                     	;# 
   178  019F                     	;# 
   179  020C                     	;# 
   180  020E                     	;# 
   181  0211                     	;# 
   182  0211                     	;# 
   183  0212                     	;# 
   184  0212                     	;# 
   185  0213                     	;# 
   186  0213                     	;# 
   187  0214                     	;# 
   188  0214                     	;# 
   189  0215                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0216                     	;# 
   194  0217                     	;# 
   195  0217                     	;# 
   196  0291                     	;# 
   197  0291                     	;# 
   198  0292                     	;# 
   199  0293                     	;# 
   200  0294                     	;# 
   201  0295                     	;# 
   202  0295                     	;# 
   203  0296                     	;# 
   204  0298                     	;# 
   205  0298                     	;# 
   206  0299                     	;# 
   207  029A                     	;# 
   208  029B                     	;# 
   209  029C                     	;# 
   210  029D                     	;# 
   211  029E                     	;# 
   212  0311                     	;# 
   213  0311                     	;# 
   214  0312                     	;# 
   215  0313                     	;# 
   216  0318                     	;# 
   217  0318                     	;# 
   218  0319                     	;# 
   219  031A                     	;# 
   220  038C                     	;# 
   221  038E                     	;# 
   222  0391                     	;# 
   223  0392                     	;# 
   224  0393                     	;# 
   225  039A                     	;# 
   226  039C                     	;# 
   227  039D                     	;# 
   228  039E                     	;# 
   229  039F                     	;# 
   230  0415                     	;# 
   231  0416                     	;# 
   232  0417                     	;# 
   233  041C                     	;# 
   234  041D                     	;# 
   235  041E                     	;# 
   236  0FE4                     	;# 
   237  0FE5                     	;# 
   238  0FE6                     	;# 
   239  0FE7                     	;# 
   240  0FE8                     	;# 
   241  0FE9                     	;# 
   242  0FEA                     	;# 
   243  0FEB                     	;# 
   244  0FED                     	;# 
   245  0FEE                     	;# 
   246  0FEF                     	;# 
   247  0000                     	;# 
   248  0001                     	;# 
   249  0002                     	;# 
   250  0003                     	;# 
   251  0004                     	;# 
   252  0005                     	;# 
   253  0006                     	;# 
   254  0007                     	;# 
   255  0008                     	;# 
   256  0009                     	;# 
   257  000A                     	;# 
   258  000B                     	;# 
   259  000C                     	;# 
   260  000E                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0016                     	;# 
   267  0017                     	;# 
   268  0018                     	;# 
   269  0019                     	;# 
   270  001A                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  008C                     	;# 
   276  008E                     	;# 
   277  0091                     	;# 
   278  0092                     	;# 
   279  0093                     	;# 
   280  0095                     	;# 
   281  0096                     	;# 
   282  0097                     	;# 
   283  0098                     	;# 
   284  0099                     	;# 
   285  009A                     	;# 
   286  009B                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  010C                     	;# 
   292  010E                     	;# 
   293  0111                     	;# 
   294  0112                     	;# 
   295  0113                     	;# 
   296  0114                     	;# 
   297  0115                     	;# 
   298  0116                     	;# 
   299  0117                     	;# 
   300  0118                     	;# 
   301  0119                     	;# 
   302  011A                     	;# 
   303  011B                     	;# 
   304  011D                     	;# 
   305  011E                     	;# 
   306  018C                     	;# 
   307  018E                     	;# 
   308  0191                     	;# 
   309  0191                     	;# 
   310  0192                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0194                     	;# 
   315  0195                     	;# 
   316  0196                     	;# 
   317  0199                     	;# 
   318  019A                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019C                     	;# 
   322  019D                     	;# 
   323  019E                     	;# 
   324  019F                     	;# 
   325  020C                     	;# 
   326  020E                     	;# 
   327  0211                     	;# 
   328  0211                     	;# 
   329  0212                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0213                     	;# 
   333  0214                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0216                     	;# 
   339  0216                     	;# 
   340  0217                     	;# 
   341  0217                     	;# 
   342  0291                     	;# 
   343  0291                     	;# 
   344  0292                     	;# 
   345  0293                     	;# 
   346  0294                     	;# 
   347  0295                     	;# 
   348  0295                     	;# 
   349  0296                     	;# 
   350  0298                     	;# 
   351  0298                     	;# 
   352  0299                     	;# 
   353  029A                     	;# 
   354  029B                     	;# 
   355  029C                     	;# 
   356  029D                     	;# 
   357  029E                     	;# 
   358  0311                     	;# 
   359  0311                     	;# 
   360  0312                     	;# 
   361  0313                     	;# 
   362  0318                     	;# 
   363  0318                     	;# 
   364  0319                     	;# 
   365  031A                     	;# 
   366  038C                     	;# 
   367  038E                     	;# 
   368  0391                     	;# 
   369  0392                     	;# 
   370  0393                     	;# 
   371  039A                     	;# 
   372  039C                     	;# 
   373  039D                     	;# 
   374  039E                     	;# 
   375  039F                     	;# 
   376  0415                     	;# 
   377  0416                     	;# 
   378  0417                     	;# 
   379  041C                     	;# 
   380  041D                     	;# 
   381  041E                     	;# 
   382  0FE4                     	;# 
   383  0FE5                     	;# 
   384  0FE6                     	;# 
   385  0FE7                     	;# 
   386  0FE8                     	;# 
   387  0FE9                     	;# 
   388  0FEA                     	;# 
   389  0FEB                     	;# 
   390  0FED                     	;# 
   391  0FEE                     	;# 
   392  0FEF                     	;# 
   393  0000                     	;# 
   394  0001                     	;# 
   395  0002                     	;# 
   396  0003                     	;# 
   397  0004                     	;# 
   398  0005                     	;# 
   399  0006                     	;# 
   400  0007                     	;# 
   401  0008                     	;# 
   402  0009                     	;# 
   403  000A                     	;# 
   404  000B                     	;# 
   405  000C                     	;# 
   406  000E                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0015                     	;# 
   411  0016                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001C                     	;# 
   419  001E                     	;# 
   420  001F                     	;# 
   421  008C                     	;# 
   422  008E                     	;# 
   423  0091                     	;# 
   424  0092                     	;# 
   425  0093                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0098                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  010C                     	;# 
   438  010E                     	;# 
   439  0111                     	;# 
   440  0112                     	;# 
   441  0113                     	;# 
   442  0114                     	;# 
   443  0115                     	;# 
   444  0116                     	;# 
   445  0117                     	;# 
   446  0118                     	;# 
   447  0119                     	;# 
   448  011A                     	;# 
   449  011B                     	;# 
   450  011D                     	;# 
   451  011E                     	;# 
   452  018C                     	;# 
   453  018E                     	;# 
   454  0191                     	;# 
   455  0191                     	;# 
   456  0192                     	;# 
   457  0193                     	;# 
   458  0193                     	;# 
   459  0193                     	;# 
   460  0194                     	;# 
   461  0195                     	;# 
   462  0196                     	;# 
   463  0199                     	;# 
   464  019A                     	;# 
   465  019B                     	;# 
   466  019B                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020C                     	;# 
   472  020E                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0294                     	;# 
   493  0295                     	;# 
   494  0295                     	;# 
   495  0296                     	;# 
   496  0298                     	;# 
   497  0298                     	;# 
   498  0299                     	;# 
   499  029A                     	;# 
   500  029B                     	;# 
   501  029C                     	;# 
   502  029D                     	;# 
   503  029E                     	;# 
   504  0311                     	;# 
   505  0311                     	;# 
   506  0312                     	;# 
   507  0313                     	;# 
   508  0318                     	;# 
   509  0318                     	;# 
   510  0319                     	;# 
   511  031A                     	;# 
   512  038C                     	;# 
   513  038E                     	;# 
   514  0391                     	;# 
   515  0392                     	;# 
   516  0393                     	;# 
   517  039A                     	;# 
   518  039C                     	;# 
   519  039D                     	;# 
   520  039E                     	;# 
   521  039F                     	;# 
   522  0415                     	;# 
   523  0416                     	;# 
   524  0417                     	;# 
   525  041C                     	;# 
   526  041D                     	;# 
   527  041E                     	;# 
   528  0FE4                     	;# 
   529  0FE5                     	;# 
   530  0FE6                     	;# 
   531  0FE7                     	;# 
   532  0FE8                     	;# 
   533  0FE9                     	;# 
   534  0FEA                     	;# 
   535  0FEB                     	;# 
   536  0FED                     	;# 
   537  0FEE                     	;# 
   538  0FEF                     	;# 
   539  0000                     	;# 
   540  0001                     	;# 
   541  0002                     	;# 
   542  0003                     	;# 
   543  0004                     	;# 
   544  0005                     	;# 
   545  0006                     	;# 
   546  0007                     	;# 
   547  0008                     	;# 
   548  0009                     	;# 
   549  000A                     	;# 
   550  000B                     	;# 
   551  000C                     	;# 
   552  000E                     	;# 
   553  0011                     	;# 
   554  0012                     	;# 
   555  0013                     	;# 
   556  0015                     	;# 
   557  0016                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001C                     	;# 
   565  001E                     	;# 
   566  001F                     	;# 
   567  008C                     	;# 
   568  008E                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0093                     	;# 
   572  0095                     	;# 
   573  0096                     	;# 
   574  0097                     	;# 
   575  0098                     	;# 
   576  0099                     	;# 
   577  009A                     	;# 
   578  009B                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  010C                     	;# 
   584  010E                     	;# 
   585  0111                     	;# 
   586  0112                     	;# 
   587  0113                     	;# 
   588  0114                     	;# 
   589  0115                     	;# 
   590  0116                     	;# 
   591  0117                     	;# 
   592  0118                     	;# 
   593  0119                     	;# 
   594  011A                     	;# 
   595  011B                     	;# 
   596  011D                     	;# 
   597  011E                     	;# 
   598  018C                     	;# 
   599  018E                     	;# 
   600  0191                     	;# 
   601  0191                     	;# 
   602  0192                     	;# 
   603  0193                     	;# 
   604  0193                     	;# 
   605  0193                     	;# 
   606  0194                     	;# 
   607  0195                     	;# 
   608  0196                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019B                     	;# 
   612  019B                     	;# 
   613  019C                     	;# 
   614  019D                     	;# 
   615  019E                     	;# 
   616  019F                     	;# 
   617  020C                     	;# 
   618  020E                     	;# 
   619  0211                     	;# 
   620  0211                     	;# 
   621  0212                     	;# 
   622  0212                     	;# 
   623  0213                     	;# 
   624  0213                     	;# 
   625  0214                     	;# 
   626  0214                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0216                     	;# 
   631  0216                     	;# 
   632  0217                     	;# 
   633  0217                     	;# 
   634  0291                     	;# 
   635  0291                     	;# 
   636  0292                     	;# 
   637  0293                     	;# 
   638  0294                     	;# 
   639  0295                     	;# 
   640  0295                     	;# 
   641  0296                     	;# 
   642  0298                     	;# 
   643  0298                     	;# 
   644  0299                     	;# 
   645  029A                     	;# 
   646  029B                     	;# 
   647  029C                     	;# 
   648  029D                     	;# 
   649  029E                     	;# 
   650  0311                     	;# 
   651  0311                     	;# 
   652  0312                     	;# 
   653  0313                     	;# 
   654  0318                     	;# 
   655  0318                     	;# 
   656  0319                     	;# 
   657  031A                     	;# 
   658  038C                     	;# 
   659  038E                     	;# 
   660  0391                     	;# 
   661  0392                     	;# 
   662  0393                     	;# 
   663  039A                     	;# 
   664  039C                     	;# 
   665  039D                     	;# 
   666  039E                     	;# 
   667  039F                     	;# 
   668  0415                     	;# 
   669  0416                     	;# 
   670  0417                     	;# 
   671  041C                     	;# 
   672  041D                     	;# 
   673  041E                     	;# 
   674  0FE4                     	;# 
   675  0FE5                     	;# 
   676  0FE6                     	;# 
   677  0FE7                     	;# 
   678  0FE8                     	;# 
   679  0FE9                     	;# 
   680  0FEA                     	;# 
   681  0FEB                     	;# 
   682  0FED                     	;# 
   683  0FEE                     	;# 
   684  0FEF                     	;# 
   685  0000                     	;# 
   686  0001                     	;# 
   687  0002                     	;# 
   688  0003                     	;# 
   689  0004                     	;# 
   690  0005                     	;# 
   691  0006                     	;# 
   692  0007                     	;# 
   693  0008                     	;# 
   694  0009                     	;# 
   695  000A                     	;# 
   696  000B                     	;# 
   697  000C                     	;# 
   698  000E                     	;# 
   699  0011                     	;# 
   700  0012                     	;# 
   701  0013                     	;# 
   702  0015                     	;# 
   703  0016                     	;# 
   704  0016                     	;# 
   705  0017                     	;# 
   706  0018                     	;# 
   707  0019                     	;# 
   708  001A                     	;# 
   709  001B                     	;# 
   710  001C                     	;# 
   711  001E                     	;# 
   712  001F                     	;# 
   713  008C                     	;# 
   714  008E                     	;# 
   715  0091                     	;# 
   716  0092                     	;# 
   717  0093                     	;# 
   718  0095                     	;# 
   719  0096                     	;# 
   720  0097                     	;# 
   721  0098                     	;# 
   722  0099                     	;# 
   723  009A                     	;# 
   724  009B                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  010C                     	;# 
   730  010E                     	;# 
   731  0111                     	;# 
   732  0112                     	;# 
   733  0113                     	;# 
   734  0114                     	;# 
   735  0115                     	;# 
   736  0116                     	;# 
   737  0117                     	;# 
   738  0118                     	;# 
   739  0119                     	;# 
   740  011A                     	;# 
   741  011B                     	;# 
   742  011D                     	;# 
   743  011E                     	;# 
   744  018C                     	;# 
   745  018E                     	;# 
   746  0191                     	;# 
   747  0191                     	;# 
   748  0192                     	;# 
   749  0193                     	;# 
   750  0193                     	;# 
   751  0193                     	;# 
   752  0194                     	;# 
   753  0195                     	;# 
   754  0196                     	;# 
   755  0199                     	;# 
   756  019A                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019C                     	;# 
   760  019D                     	;# 
   761  019E                     	;# 
   762  019F                     	;# 
   763  020C                     	;# 
   764  020E                     	;# 
   765  0211                     	;# 
   766  0211                     	;# 
   767  0212                     	;# 
   768  0212                     	;# 
   769  0213                     	;# 
   770  0213                     	;# 
   771  0214                     	;# 
   772  0214                     	;# 
   773  0215                     	;# 
   774  0215                     	;# 
   775  0215                     	;# 
   776  0216                     	;# 
   777  0216                     	;# 
   778  0217                     	;# 
   779  0217                     	;# 
   780  0291                     	;# 
   781  0291                     	;# 
   782  0292                     	;# 
   783  0293                     	;# 
   784  0294                     	;# 
   785  0295                     	;# 
   786  0295                     	;# 
   787  0296                     	;# 
   788  0298                     	;# 
   789  0298                     	;# 
   790  0299                     	;# 
   791  029A                     	;# 
   792  029B                     	;# 
   793  029C                     	;# 
   794  029D                     	;# 
   795  029E                     	;# 
   796  0311                     	;# 
   797  0311                     	;# 
   798  0312                     	;# 
   799  0313                     	;# 
   800  0318                     	;# 
   801  0318                     	;# 
   802  0319                     	;# 
   803  031A                     	;# 
   804  038C                     	;# 
   805  038E                     	;# 
   806  0391                     	;# 
   807  0392                     	;# 
   808  0393                     	;# 
   809  039A                     	;# 
   810  039C                     	;# 
   811  039D                     	;# 
   812  039E                     	;# 
   813  039F                     	;# 
   814  0415                     	;# 
   815  0416                     	;# 
   816  0417                     	;# 
   817  041C                     	;# 
   818  041D                     	;# 
   819  041E                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000E                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0013                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  001E                     	;# 
   858  001F                     	;# 
   859  008C                     	;# 
   860  008E                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0093                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0098                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010E                     	;# 
   877  0111                     	;# 
   878  0112                     	;# 
   879  0113                     	;# 
   880  0114                     	;# 
   881  0115                     	;# 
   882  0116                     	;# 
   883  0117                     	;# 
   884  0118                     	;# 
   885  0119                     	;# 
   886  011A                     	;# 
   887  011B                     	;# 
   888  011D                     	;# 
   889  011E                     	;# 
   890  018C                     	;# 
   891  018E                     	;# 
   892  0191                     	;# 
   893  0191                     	;# 
   894  0192                     	;# 
   895  0193                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0194                     	;# 
   899  0195                     	;# 
   900  0196                     	;# 
   901  0199                     	;# 
   902  019A                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019C                     	;# 
   906  019D                     	;# 
   907  019E                     	;# 
   908  019F                     	;# 
   909  020C                     	;# 
   910  020E                     	;# 
   911  0211                     	;# 
   912  0211                     	;# 
   913  0212                     	;# 
   914  0212                     	;# 
   915  0213                     	;# 
   916  0213                     	;# 
   917  0214                     	;# 
   918  0214                     	;# 
   919  0215                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0216                     	;# 
   923  0216                     	;# 
   924  0217                     	;# 
   925  0217                     	;# 
   926  0291                     	;# 
   927  0291                     	;# 
   928  0292                     	;# 
   929  0293                     	;# 
   930  0294                     	;# 
   931  0295                     	;# 
   932  0295                     	;# 
   933  0296                     	;# 
   934  0298                     	;# 
   935  0298                     	;# 
   936  0299                     	;# 
   937  029A                     	;# 
   938  029B                     	;# 
   939  029C                     	;# 
   940  029D                     	;# 
   941  029E                     	;# 
   942  0311                     	;# 
   943  0311                     	;# 
   944  0312                     	;# 
   945  0313                     	;# 
   946  0318                     	;# 
   947  0318                     	;# 
   948  0319                     	;# 
   949  031A                     	;# 
   950  038C                     	;# 
   951  038E                     	;# 
   952  0391                     	;# 
   953  0392                     	;# 
   954  0393                     	;# 
   955  039A                     	;# 
   956  039C                     	;# 
   957  039D                     	;# 
   958  039E                     	;# 
   959  039F                     	;# 
   960  0415                     	;# 
   961  0416                     	;# 
   962  0417                     	;# 
   963  041C                     	;# 
   964  041D                     	;# 
   965  041E                     	;# 
   966  0FE4                     	;# 
   967  0FE5                     	;# 
   968  0FE6                     	;# 
   969  0FE7                     	;# 
   970  0FE8                     	;# 
   971  0FE9                     	;# 
   972  0FEA                     	;# 
   973  0FEB                     	;# 
   974  0FED                     	;# 
   975  0FEE                     	;# 
   976  0FEF                     	;# 
   977  0000                     	;# 
   978  0001                     	;# 
   979  0002                     	;# 
   980  0003                     	;# 
   981  0004                     	;# 
   982  0005                     	;# 
   983  0006                     	;# 
   984  0007                     	;# 
   985  0008                     	;# 
   986  0009                     	;# 
   987  000A                     	;# 
   988  000B                     	;# 
   989  000C                     	;# 
   990  000E                     	;# 
   991  0011                     	;# 
   992  0012                     	;# 
   993  0013                     	;# 
   994  0015                     	;# 
   995  0016                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001C                     	;# 
  1003  001E                     	;# 
  1004  001F                     	;# 
  1005  008C                     	;# 
  1006  008E                     	;# 
  1007  0091                     	;# 
  1008  0092                     	;# 
  1009  0093                     	;# 
  1010  0095                     	;# 
  1011  0096                     	;# 
  1012  0097                     	;# 
  1013  0098                     	;# 
  1014  0099                     	;# 
  1015  009A                     	;# 
  1016  009B                     	;# 
  1017  009B                     	;# 
  1018  009C                     	;# 
  1019  009D                     	;# 
  1020  009E                     	;# 
  1021  010C                     	;# 
  1022  010E                     	;# 
  1023  0111                     	;# 
  1024  0112                     	;# 
  1025  0113                     	;# 
  1026  0114                     	;# 
  1027  0115                     	;# 
  1028  0116                     	;# 
  1029  0117                     	;# 
  1030  0118                     	;# 
  1031  0119                     	;# 
  1032  011A                     	;# 
  1033  011B                     	;# 
  1034  011D                     	;# 
  1035  011E                     	;# 
  1036  018C                     	;# 
  1037  018E                     	;# 
  1038  0191                     	;# 
  1039  0191                     	;# 
  1040  0192                     	;# 
  1041  0193                     	;# 
  1042  0193                     	;# 
  1043  0193                     	;# 
  1044  0194                     	;# 
  1045  0195                     	;# 
  1046  0196                     	;# 
  1047  0199                     	;# 
  1048  019A                     	;# 
  1049  019B                     	;# 
  1050  019B                     	;# 
  1051  019C                     	;# 
  1052  019D                     	;# 
  1053  019E                     	;# 
  1054  019F                     	;# 
  1055  020C                     	;# 
  1056  020E                     	;# 
  1057  0211                     	;# 
  1058  0211                     	;# 
  1059  0212                     	;# 
  1060  0212                     	;# 
  1061  0213                     	;# 
  1062  0213                     	;# 
  1063  0214                     	;# 
  1064  0214                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0216                     	;# 
  1069  0216                     	;# 
  1070  0217                     	;# 
  1071  0217                     	;# 
  1072  0291                     	;# 
  1073  0291                     	;# 
  1074  0292                     	;# 
  1075  0293                     	;# 
  1076  0294                     	;# 
  1077  0295                     	;# 
  1078  0295                     	;# 
  1079  0296                     	;# 
  1080  0298                     	;# 
  1081  0298                     	;# 
  1082  0299                     	;# 
  1083  029A                     	;# 
  1084  029B                     	;# 
  1085  029C                     	;# 
  1086  029D                     	;# 
  1087  029E                     	;# 
  1088  0311                     	;# 
  1089  0311                     	;# 
  1090  0312                     	;# 
  1091  0313                     	;# 
  1092  0318                     	;# 
  1093  0318                     	;# 
  1094  0319                     	;# 
  1095  031A                     	;# 
  1096  038C                     	;# 
  1097  038E                     	;# 
  1098  0391                     	;# 
  1099  0392                     	;# 
  1100  0393                     	;# 
  1101  039A                     	;# 
  1102  039C                     	;# 
  1103  039D                     	;# 
  1104  039E                     	;# 
  1105  039F                     	;# 
  1106  0415                     	;# 
  1107  0416                     	;# 
  1108  0417                     	;# 
  1109  041C                     	;# 
  1110  041D                     	;# 
  1111  041E                     	;# 
  1112  0FE4                     	;# 
  1113  0FE5                     	;# 
  1114  0FE6                     	;# 
  1115  0FE7                     	;# 
  1116  0FE8                     	;# 
  1117  0FE9                     	;# 
  1118  0FEA                     	;# 
  1119  0FEB                     	;# 
  1120  0FED                     	;# 
  1121  0FEE                     	;# 
  1122  0FEF                     	;# 
  1123  0000                     	;# 
  1124  0001                     	;# 
  1125  0002                     	;# 
  1126  0003                     	;# 
  1127  0004                     	;# 
  1128  0005                     	;# 
  1129  0006                     	;# 
  1130  0007                     	;# 
  1131  0008                     	;# 
  1132  0009                     	;# 
  1133  000A                     	;# 
  1134  000B                     	;# 
  1135  000C                     	;# 
  1136  000E                     	;# 
  1137  0011                     	;# 
  1138  0012                     	;# 
  1139  0013                     	;# 
  1140  0015                     	;# 
  1141  0016                     	;# 
  1142  0016                     	;# 
  1143  0017                     	;# 
  1144  0018                     	;# 
  1145  0019                     	;# 
  1146  001A                     	;# 
  1147  001B                     	;# 
  1148  001C                     	;# 
  1149  001E                     	;# 
  1150  001F                     	;# 
  1151  008C                     	;# 
  1152  008E                     	;# 
  1153  0091                     	;# 
  1154  0092                     	;# 
  1155  0093                     	;# 
  1156  0095                     	;# 
  1157  0096                     	;# 
  1158  0097                     	;# 
  1159  0098                     	;# 
  1160  0099                     	;# 
  1161  009A                     	;# 
  1162  009B                     	;# 
  1163  009B                     	;# 
  1164  009C                     	;# 
  1165  009D                     	;# 
  1166  009E                     	;# 
  1167  010C                     	;# 
  1168  010E                     	;# 
  1169  0111                     	;# 
  1170  0112                     	;# 
  1171  0113                     	;# 
  1172  0114                     	;# 
  1173  0115                     	;# 
  1174  0116                     	;# 
  1175  0117                     	;# 
  1176  0118                     	;# 
  1177  0119                     	;# 
  1178  011A                     	;# 
  1179  011B                     	;# 
  1180  011D                     	;# 
  1181  011E                     	;# 
  1182  018C                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0193                     	;# 
  1190  0194                     	;# 
  1191  0195                     	;# 
  1192  0196                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019C                     	;# 
  1198  019D                     	;# 
  1199  019E                     	;# 
  1200  019F                     	;# 
  1201  020C                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0291                     	;# 
  1219  0291                     	;# 
  1220  0292                     	;# 
  1221  0293                     	;# 
  1222  0294                     	;# 
  1223  0295                     	;# 
  1224  0295                     	;# 
  1225  0296                     	;# 
  1226  0298                     	;# 
  1227  0298                     	;# 
  1228  0299                     	;# 
  1229  029A                     	;# 
  1230  029B                     	;# 
  1231  029C                     	;# 
  1232  029D                     	;# 
  1233  029E                     	;# 
  1234  0311                     	;# 
  1235  0311                     	;# 
  1236  0312                     	;# 
  1237  0313                     	;# 
  1238  0318                     	;# 
  1239  0318                     	;# 
  1240  0319                     	;# 
  1241  031A                     	;# 
  1242  038C                     	;# 
  1243  038E                     	;# 
  1244  0391                     	;# 
  1245  0392                     	;# 
  1246  0393                     	;# 
  1247  039A                     	;# 
  1248  039C                     	;# 
  1249  039D                     	;# 
  1250  039E                     	;# 
  1251  039F                     	;# 
  1252  0415                     	;# 
  1253  0416                     	;# 
  1254  0417                     	;# 
  1255  041C                     	;# 
  1256  041D                     	;# 
  1257  041E                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269                           
  1270                           	psect	idataBANK0
  1271  0594                     __pidataBANK0:	
  1272                           
  1273                           ;initializer for _LIN_timeout
  1274  0594  340A               	retlw	10
  1275                           
  1276                           	psect	stringtext
  1277  04DF                     __pstringtext:	
  1278  04DF                     _scheduleTable:	
  1279  04DF  3400               	retlw	0
  1280  04E0  3401               	retlw	1
  1281  04E1  3401               	retlw	1
  1282  04E2  3450               	retlw	low (_UNLOCK_Data| 0)
  1283  04E3  3401               	retlw	1
  1284  04E4  3401               	retlw	1
  1285  04E5  3401               	retlw	1
  1286  04E6  344F               	retlw	low (_RSSI_Data| 0)
  1287  04E7  3402               	retlw	2
  1288  04E8  3400               	retlw	0
  1289  04E9  3408               	retlw	8
  1290  04EA  34A0               	retlw	low (_LFRX_Data| 0)
  1291  04EB  3403               	retlw	3
  1292  04EC  3401               	retlw	1
  1293  04ED  3401               	retlw	1
  1294  04EE  344E               	retlw	low (_led_Data| 0)
  1295  04EF                     __end_of_scheduleTable:	
  1296                           
  1297                           	psect	nvBANK0
  1298  0051                     __pnvBANK0:	
  1299  0051                     _EUSART_OverrunErrorHandler:	
  1300  0051                     	ds	2
  1301  0053                     _EUSART_FramingErrorHandler:	
  1302  0053                     	ds	2
  1303  0055                     _TMR0_InterruptHandler:	
  1304  0055                     	ds	2
  1305  0057                     _LIN_rxCommand:	
  1306  0057                     	ds	2
  1307  0059                     _LIN_processData:	
  1308  0059                     	ds	2
  1309  005B                     _EUSART_RxDefaultInterruptHandler:	
  1310  005B                     	ds	2
  1311  005D                     _EUSART_TxDefaultInterruptHandler:	
  1312  005D                     	ds	2
  1313  005F                     _eusartTxBufferRemaining:	
  1314  005F                     	ds	1
  1315  0060                     _timer0ReloadVal:	
  1316  0060                     	ds	1
  1317  0061                     _LIN_rxCommandLength:	
  1318  0061                     	ds	1
  1319                           
  1320                           	psect	nvBANK1
  1321  00AB                     __pnvBANK1:	
  1322  00AB                     _EUSART_ErrorHandler:	
  1323  00AB                     	ds	2
  1324  0015                     _TMR0	set	21
  1325  0011                     _PIR1bits	set	17
  1326  000B                     _INTCONbits	set	11
  1327  008E                     _TRISCbits	set	142
  1328  0095                     _OPTION_REG	set	149
  1329  0097                     _WDTCON	set	151
  1330  0098                     _OSCTUNE	set	152
  1331  0099                     _OSCCON	set	153
  1332  0091                     _PIE1bits	set	145
  1333  0095                     _OPTION_REGbits	set	149
  1334  008E                     _TRISC	set	142
  1335  008C                     _TRISA	set	140
  1336  010E                     _LATCbits	set	270
  1337  0116                     _BORCON	set	278
  1338  011E                     _APFCON1	set	286
  1339  011D                     _APFCON0	set	285
  1340  010E                     _LATC	set	270
  1341  010C                     _LATA	set	268
  1342  0199                     _RCREG	set	409
  1343  019A                     _TXREG	set	410
  1344  019C                     _SPBRGH	set	412
  1345  019B                     _SPBRGL	set	411
  1346  019E                     _TXSTA	set	414
  1347  019D                     _RCSTA	set	413
  1348  019F                     _BAUDCON	set	415
  1349  019D                     _RCSTAbits	set	413
  1350  019E                     _TXSTAbits	set	414
  1351  018C                     _ANSELA	set	396
  1352  018E                     _ANSELC	set	398
  1353  020E                     _WPUC	set	526
  1354  020C                     _WPUA	set	524
  1355                           
  1356                           ; #config settings
  1357  0000                     
  1358                           	psect	cinit
  1359  0030                     start_initialization:	
  1360  0030                     __initialization:	
  1361                           
  1362                           ; Initialize objects allocated to BANK0
  1363  0030  3185  2594  3180   	fcall	__pidataBANK0	;fetch initializer
  1364  0033  00EE               	movwf	__pdataBANK0& (0+127)
  1365                           
  1366                           ; Clear objects allocated to COMMON
  1367  0034  01FA               	clrf	__pbssCOMMON& (0+127)
  1368  0035  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  1369                           
  1370                           ; Clear objects allocated to BANK0
  1371  0036  3020               	movlw	low __pbssBANK0
  1372  0037  0084               	movwf	4
  1373  0038  3000               	movlw	high __pbssBANK0
  1374  0039  0085               	movwf	5
  1375  003A  3031               	movlw	49
  1376  003B  3185  2540  3180   	fcall	clear_ram0
  1377                           
  1378                           ; Clear objects allocated to BANK1
  1379  003E  30A0               	movlw	low __pbssBANK1
  1380  003F  0084               	movwf	4
  1381  0040  3000               	movlw	high __pbssBANK1
  1382  0041  0085               	movwf	5
  1383  0042  3008               	movlw	8
  1384  0043  3185  2540         	fcall	clear_ram0
  1385  0045                     end_of_initialization:	
  1386                           ;End of C runtime variable initialization code
  1387                           
  1388  0045                     __end_of__initialization:	
  1389  0045  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1390  0046  0020               	movlb	0
  1391  0047  3184  2CCE         	ljmp	_main	;jump to C main() function
  1392                           
  1393                           	psect	bssCOMMON
  1394  007A                     __pbssCOMMON:	
  1395  007A                     _eusartRxTail:	
  1396  007A                     	ds	1
  1397  007B                     _eusartRxHead:	
  1398  007B                     	ds	1
  1399                           
  1400                           	psect	bssBANK0
  1401  0020                     __pbssBANK0:	
  1402  0020                     _eusartRxStatusBuffer:	
  1403  0020                     	ds	8
  1404  0028                     _eusartRxBuffer:	
  1405  0028                     	ds	8
  1406  0030                     _eusartTxBuffer:	
  1407  0030                     	ds	8
  1408  0038                     _eusartRxLastError:	
  1409  0038                     	ds	1
  1410  0039                     _eusartRxCount:	
  1411  0039                     	ds	1
  1412  003A                     _eusartTxTail:	
  1413  003A                     	ds	1
  1414  003B                     _eusartTxHead:	
  1415  003B                     	ds	1
  1416  003C                     LIN_handler@rxDataIndex:	
  1417  003C                     	ds	1
  1418  003D                     LIN_handler@LIN_rxState:	
  1419  003D                     	ds	1
  1420  003E                     _CountCallBack:	
  1421  003E                     	ds	1
  1422  003F                     _LIN_timerRunning:	
  1423  003F                     	ds	1
  1424  0040                     _LIN_rxInProgress:	
  1425  0040                     	ds	1
  1426  0041                     _LIN_packet:	
  1427  0041                     	ds	13
  1428  004E                     _led_Data:	
  1429  004E                     	ds	1
  1430  004F                     _RSSI_Data:	
  1431  004F                     	ds	1
  1432  0050                     _UNLOCK_Data:	
  1433  0050                     	ds	1
  1434                           
  1435                           	psect	dataBANK0
  1436  006E                     __pdataBANK0:	
  1437  006E                     _LIN_timeout:	
  1438  006E                     	ds	1
  1439                           
  1440                           	psect	bssBANK1
  1441  00A0                     __pbssBANK1:	
  1442  00A0                     _LFRX_Data:	
  1443  00A0                     	ds	8
  1444                           
  1445                           	psect	clrtext
  1446  0540                     clear_ram0:	
  1447                           ;	Called with FSR0 containing the base address, and
  1448                           ;	WREG with the size to clear
  1449                           
  1450  0540  0064               	clrwdt	;clear the watchdog before getting into this loop
  1451  0541                     clrloop0:	
  1452  0541  0180               	clrf	0	;clear RAM location pointed to by FSR
  1453  0542  3101               	addfsr 0,1
  1454  0543  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1455  0544  2D41               	goto	clrloop0	;have we reached the end yet?
  1456  0545  3400               	retlw	0	;all done for this memory range, return
  1457                           
  1458                           	psect	cstackBANK1
  1459  00A8                     __pcstackBANK1:	
  1460  00A8                     ??_LIN_handler:	
  1461                           
  1462                           ; 1 bytes @ 0x0
  1463  00A8                     	ds	3
  1464                           
  1465                           	psect	cstackCOMMON
  1466  0070                     __pcstackCOMMON:	
  1467  0070                     ?_TMR0_ISR:	
  1468  0070                     ?_OSCILLATOR_Initialize:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_WDT_Initialize:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ?_TMR0_Initialize:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ?_EUSART_Initialize:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0070                     ?_LIN_Slave_Initialize:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ?_LIN_stopTimer:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_LIN_enableRx:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ?_LIN_setTimerHandler:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0070                     ?_EUSART_is_rx_ready:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0070                     ?_LIN_startTimer:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  0070                     ?_LIN_breakCheck:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  0070                     ?_EUSART_Read:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  0070                     ?_LIN_checkPID:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  0070                     ?_LIN_disableRx:	
  1508                           ; 1 bytes @ 0x0
  1509                           
  1510  0070                     ?_EUSART_Write:	
  1511                           ; 1 bytes @ 0x0
  1512                           
  1513  0070                     ?_LIN_calcParity:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  0070                     ?_TMR0_WriteTimer:	
  1517                           ; 1 bytes @ 0x0
  1518                           
  1519  0070                     ?_EUSART_get_last_status:	
  1520                           ; 1 bytes @ 0x0
  1521                           
  1522  0070                     ?_processLIN:	
  1523                           ; 1 bytes @ 0x0
  1524                           
  1525  0070                     ?_TMR0_DefaultInterruptHandler:	
  1526                           ; 1 bytes @ 0x0
  1527                           
  1528  0070                     ??_TMR0_DefaultInterruptHandler:	
  1529                           ; 1 bytes @ 0x0
  1530                           
  1531  0070                     ?_EUSART_Receive_ISR:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0070                     ?_EUSART_Transmit_ISR:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0070                     ??_EUSART_Transmit_ISR:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1541                           ; 1 bytes @ 0x0
  1542                           
  1543  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1547                           ; 1 bytes @ 0x0
  1548                           
  1549  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1550                           ; 1 bytes @ 0x0
  1551                           
  1552  0070                     ?_EUSART_DefaultErrorHandler:	
  1553                           ; 1 bytes @ 0x0
  1554                           
  1555  0070                     ?_EUSART_RxDataHandler:	
  1556                           ; 1 bytes @ 0x0
  1557                           
  1558  0070                     ??_EUSART_RxDataHandler:	
  1559                           ; 1 bytes @ 0x0
  1560                           
  1561  0070                     ?_PIN_MANAGER_Initialize:	
  1562                           ; 1 bytes @ 0x0
  1563                           
  1564  0070                     ?_INTERRUPT_InterruptManager:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567  0070                     ?_SYSTEM_Initialize:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0070                     ?_LIN_queuePacket:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0070                     ?_LIN_handler:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576  0070                     ?_LIN_getPacket:	
  1577                           ; 1 bytes @ 0x0
  1578                           
  1579  0070                     ?_LIN_timerHandler:	
  1580                           ; 1 bytes @ 0x0
  1581                           
  1582  0070                     ??_LIN_timerHandler:	
  1583                           ; 1 bytes @ 0x0
  1584                           
  1585  0070                     ?_main:	
  1586                           ; 1 bytes @ 0x0
  1587                           
  1588  0070                     ?i1_LIN_stopTimer:	
  1589                           ; 1 bytes @ 0x0
  1590                           
  1591  0070                     ??i1_LIN_stopTimer:	
  1592                           ; 1 bytes @ 0x0
  1593                           
  1594                           
  1595                           ; 1 bytes @ 0x0
  1596  0070                     	ds	1
  1597  0071                     ??_TMR0_ISR:	
  1598  0071                     ??_EUSART_Receive_ISR:	
  1599                           ; 1 bytes @ 0x1
  1600                           
  1601  0071                     ??_EUSART_DefaultErrorHandler:	
  1602                           ; 1 bytes @ 0x1
  1603                           
  1604  0071                     ??_INTERRUPT_InterruptManager:	
  1605                           ; 1 bytes @ 0x1
  1606                           
  1607                           
  1608                           ; 1 bytes @ 0x1
  1609  0071                     	ds	1
  1610  0072                     ??_OSCILLATOR_Initialize:	
  1611  0072                     ??_WDT_Initialize:	
  1612                           ; 1 bytes @ 0x2
  1613                           
  1614  0072                     ??_LIN_stopTimer:	
  1615                           ; 1 bytes @ 0x2
  1616                           
  1617  0072                     ??_LIN_enableRx:	
  1618                           ; 1 bytes @ 0x2
  1619                           
  1620  0072                     ?_LIN_getChecksum:	
  1621                           ; 1 bytes @ 0x2
  1622                           
  1623  0072                     ??_EUSART_is_rx_ready:	
  1624                           ; 1 bytes @ 0x2
  1625                           
  1626  0072                     ??_EUSART_Read:	
  1627                           ; 1 bytes @ 0x2
  1628                           
  1629  0072                     ?_LIN_getFromTable:	
  1630                           ; 1 bytes @ 0x2
  1631                           
  1632  0072                     ??_LIN_disableRx:	
  1633                           ; 1 bytes @ 0x2
  1634                           
  1635  0072                     ?_memset:	
  1636                           ; 1 bytes @ 0x2
  1637                           
  1638  0072                     ??_EUSART_Write:	
  1639                           ; 1 bytes @ 0x2
  1640                           
  1641  0072                     ??_LIN_calcParity:	
  1642                           ; 1 bytes @ 0x2
  1643                           
  1644  0072                     ??_TMR0_WriteTimer:	
  1645                           ; 1 bytes @ 0x2
  1646                           
  1647  0072                     ?_TMR0_SetInterruptHandler:	
  1648                           ; 1 bytes @ 0x2
  1649                           
  1650  0072                     ??_EUSART_get_last_status:	
  1651                           ; 1 bytes @ 0x2
  1652                           
  1653  0072                     ?_EUSART_SetRxInterruptHandler:	
  1654                           ; 1 bytes @ 0x2
  1655                           
  1656  0072                     ?_EUSART_SetTxInterruptHandler:	
  1657                           ; 1 bytes @ 0x2
  1658                           
  1659  0072                     ?_EUSART_SetFramingErrorHandler:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662  0072                     ?_EUSART_SetOverrunErrorHandler:	
  1663                           ; 1 bytes @ 0x2
  1664                           
  1665  0072                     ?_EUSART_SetErrorHandler:	
  1666                           ; 1 bytes @ 0x2
  1667                           
  1668  0072                     ??_PIN_MANAGER_Initialize:	
  1669                           ; 1 bytes @ 0x2
  1670                           
  1671  0072                     LIN_getFromTable@param:	
  1672                           ; 1 bytes @ 0x2
  1673                           
  1674  0072                     LIN_getChecksum@data:	
  1675                           ; 1 bytes @ 0x2
  1676                           
  1677  0072                     TMR0_WriteTimer@timerVal:	
  1678                           ; 1 bytes @ 0x2
  1679                           
  1680  0072                     TMR0_SetInterruptHandler@InterruptHandler:	
  1681                           ; 1 bytes @ 0x2
  1682                           
  1683  0072                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1684                           ; 2 bytes @ 0x2
  1685                           
  1686  0072                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1687                           ; 2 bytes @ 0x2
  1688                           
  1689  0072                     EUSART_SetErrorHandler@interruptHandler:	
  1690                           ; 2 bytes @ 0x2
  1691                           
  1692  0072                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1693                           ; 2 bytes @ 0x2
  1694                           
  1695  0072                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1696                           ; 2 bytes @ 0x2
  1697                           
  1698  0072                     memset@c:	
  1699                           ; 2 bytes @ 0x2
  1700                           
  1701                           
  1702                           ; 2 bytes @ 0x2
  1703  0072                     	ds	1
  1704  0073                     ??_LIN_getChecksum:	
  1705  0073                     ??_LIN_startTimer:	
  1706                           ; 1 bytes @ 0x3
  1707                           
  1708  0073                     ??_LIN_getFromTable:	
  1709                           ; 1 bytes @ 0x3
  1710                           
  1711  0073                     LIN_calcParity@CMD:	
  1712                           ; 1 bytes @ 0x3
  1713                           
  1714  0073                     EUSART_Read@readValue:	
  1715                           ; 1 bytes @ 0x3
  1716                           
  1717  0073                     EUSART_Write@txData:	
  1718                           ; 1 bytes @ 0x3
  1719                           
  1720                           
  1721                           ; 1 bytes @ 0x3
  1722  0073                     	ds	1
  1723  0074                     ??_TMR0_Initialize:	
  1724  0074                     ??_EUSART_Initialize:	
  1725                           ; 1 bytes @ 0x4
  1726                           
  1727  0074                     ??_LIN_setTimerHandler:	
  1728                           ; 1 bytes @ 0x4
  1729                           
  1730  0074                     ??_LIN_breakCheck:	
  1731                           ; 1 bytes @ 0x4
  1732                           
  1733  0074                     ??_TMR0_SetInterruptHandler:	
  1734                           ; 1 bytes @ 0x4
  1735                           
  1736  0074                     ??_EUSART_SetRxInterruptHandler:	
  1737                           ; 1 bytes @ 0x4
  1738                           
  1739  0074                     ??_EUSART_SetTxInterruptHandler:	
  1740                           ; 1 bytes @ 0x4
  1741                           
  1742  0074                     ??_EUSART_SetFramingErrorHandler:	
  1743                           ; 1 bytes @ 0x4
  1744                           
  1745  0074                     ??_EUSART_SetOverrunErrorHandler:	
  1746                           ; 1 bytes @ 0x4
  1747                           
  1748  0074                     ??_EUSART_SetErrorHandler:	
  1749                           ; 1 bytes @ 0x4
  1750                           
  1751  0074                     ?_LIN_init:	
  1752                           ; 1 bytes @ 0x4
  1753                           
  1754  0074                     LIN_calcParity@PID:	
  1755                           ; 1 bytes @ 0x4
  1756                           
  1757  0074                     LIN_getChecksum@length:	
  1758                           ; 1 bytes @ 0x4
  1759                           
  1760  0074                     LIN_startTimer@timeout:	
  1761                           ; 1 bytes @ 0x4
  1762                           
  1763  0074                     LIN_init@command:	
  1764                           ; 1 bytes @ 0x4
  1765                           
  1766  0074                     memset@n:	
  1767                           ; 2 bytes @ 0x4
  1768                           
  1769                           
  1770                           ; 2 bytes @ 0x4
  1771  0074                     	ds	1
  1772  0075                     LIN_getFromTable@cmd:	
  1773  0075                     LIN_getChecksum@i:	
  1774                           ; 1 bytes @ 0x5
  1775                           
  1776                           
  1777                           ; 1 bytes @ 0x5
  1778  0075                     	ds	1
  1779  0076                     ??_memset:	
  1780  0076                     LIN_getFromTable@length:	
  1781                           ; 1 bytes @ 0x6
  1782                           
  1783  0076                     LIN_init@processData:	
  1784                           ; 1 bytes @ 0x6
  1785                           
  1786  0076                     LIN_getChecksum@checksum:	
  1787                           ; 2 bytes @ 0x6
  1788                           
  1789                           
  1790                           ; 2 bytes @ 0x6
  1791  0076                     	ds	1
  1792  0077                     memset@p:	
  1793  0077                     LIN_getFromTable@rxCommand:	
  1794                           ; 1 bytes @ 0x7
  1795                           
  1796                           
  1797                           ; 2 bytes @ 0x7
  1798  0077                     	ds	1
  1799  0078                     ?_LIN_sendPacket:	
  1800  0078                     ??_LIN_init:	
  1801                           ; 1 bytes @ 0x8
  1802                           
  1803  0078                     LIN_sendPacket@data:	
  1804                           ; 1 bytes @ 0x8
  1805                           
  1806  0078                     memset@p1:	
  1807                           ; 1 bytes @ 0x8
  1808                           
  1809                           
  1810                           ; 1 bytes @ 0x8
  1811  0078                     	ds	1
  1812  0079                     ??_LIN_sendPacket:	
  1813  0079                     ??_LIN_checkPID:	
  1814                           ; 1 bytes @ 0x9
  1815                           
  1816  0079                     ??_LIN_getPacket:	
  1817                           ; 1 bytes @ 0x9
  1818                           
  1819  0079                     LIN_init@tableLength:	
  1820                           ; 1 bytes @ 0x9
  1821                           
  1822  0079                     LIN_checkPID@pid:	
  1823                           ; 1 bytes @ 0x9
  1824                           
  1825                           
  1826                           ; 1 bytes @ 0x9
  1827  0079                     	ds	1
  1828  007A                     ??_LIN_Slave_Initialize:	
  1829  007A                     ??_SYSTEM_Initialize:	
  1830                           ; 1 bytes @ 0xA
  1831                           
  1832  007A                     ??_main:	
  1833                           ; 1 bytes @ 0xA
  1834                           
  1835                           
  1836                           	psect	cstackBANK0
  1837  0062                     __pcstackBANK0:	
  1838                           ; 1 bytes @ 0xA
  1839                           
  1840  0062                     LIN_sendPacket@length:	
  1841  0062                     LIN_getPacket@data:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844                           
  1845                           ; 1 bytes @ 0x0
  1846  0062                     	ds	1
  1847  0063                     LIN_sendPacket@i:	
  1848  0063                     LIN_getPacket@cmd:	
  1849                           ; 1 bytes @ 0x1
  1850                           
  1851                           
  1852                           ; 1 bytes @ 0x1
  1853  0063                     	ds	1
  1854  0064                     ??_processLIN:	
  1855  0064                     ??_LIN_queuePacket:	
  1856                           ; 1 bytes @ 0x2
  1857                           
  1858                           
  1859                           ; 1 bytes @ 0x2
  1860  0064                     	ds	1
  1861  0065                     processLIN@tempRxData:	
  1862                           
  1863                           ; 8 bytes @ 0x3
  1864  0065                     	ds	2
  1865  0067                     LIN_queuePacket@cmd:	
  1866                           
  1867                           ; 1 bytes @ 0x5
  1868  0067                     	ds	1
  1869  0068                     LIN_queuePacket@i:	
  1870                           
  1871                           ; 1 bytes @ 0x6
  1872  0068                     	ds	1
  1873  0069                     LIN_queuePacket@tempSchedule:	
  1874                           
  1875                           ; 2 bytes @ 0x7
  1876  0069                     	ds	4
  1877  006D                     processLIN@cmd:	
  1878                           
  1879                           ; 1 bytes @ 0xB
  1880  006D                     	ds	1
  1881                           
  1882                           	psect	maintext
  1883  04CE                     __pmaintext:	
  1884 ;;
  1885 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1886 ;;
  1887 ;; *************** function _main *****************
  1888 ;; Defined at:
  1889 ;;		line 49 in file "main.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : B1F/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1907 ;;Total ram usage:        0 bytes
  1908 ;; Hardware stack levels required when called:    9
  1909 ;; This function calls:
  1910 ;;		_LIN_Slave_Initialize
  1911 ;;		_LIN_handler
  1912 ;;		_SYSTEM_Initialize
  1913 ;;		_processLIN
  1914 ;; This function is called by:
  1915 ;;		Startup code after reset
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _main
  1921  04CE                     _main:	
  1922                           
  1923                           ;main.c: 52: SYSTEM_Initialize();
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1927  04CE  3184  24BC  3184   	fcall	_SYSTEM_Initialize
  1928                           
  1929                           ;main.c: 69: TRISCbits.TRISC0 = 0;
  1930  04D1  0021               	movlb	1	; select bank1
  1931  04D2  100E               	bcf	14,0	;volatile
  1932                           
  1933                           ;main.c: 70: LATCbits.LATC0 = 0;
  1934  04D3  0022               	movlb	2	; select bank2
  1935  04D4  100E               	bcf	14,0	;volatile
  1936                           
  1937                           ;main.c: 73: LIN_Slave_Initialize();
  1938  04D5  3185  251A  3184   	fcall	_LIN_Slave_Initialize
  1939  04D8                     l2231:	
  1940                           ;main.c: 74: while (1)
  1941                           
  1942                           
  1943                           ;main.c: 75: {
  1944                           ;main.c: 76: LIN_handler();
  1945  04D8  3180  2049  3184   	fcall	_LIN_handler
  1946                           
  1947                           ;main.c: 77: processLIN();
  1948  04DB  3183  2377  3184   	fcall	_processLIN
  1949  04DE  2CD8               	goto	l2231
  1950  04DF                     __end_of_main:	
  1951                           
  1952                           	psect	text1
  1953  04BC                     __ptext1:	
  1954 ;; *************** function _SYSTEM_Initialize *****************
  1955 ;; Defined at:
  1956 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;		None
  1961 ;; Return value:  Size  Location     Type
  1962 ;;                  1    wreg      void 
  1963 ;; Registers used:
  1964 ;;		wreg, status,2, status,0, pclath, cstack
  1965 ;; Tracked objects:
  1966 ;;		On entry : 0/0
  1967 ;;		On exit  : 0/0
  1968 ;;		Unchanged: 0/0
  1969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1974 ;;Total ram usage:        0 bytes
  1975 ;; Hardware stack levels used:    1
  1976 ;; Hardware stack levels required when called:    8
  1977 ;; This function calls:
  1978 ;;		_EUSART_Initialize
  1979 ;;		_LIN_Slave_Initialize
  1980 ;;		_OSCILLATOR_Initialize
  1981 ;;		_PIN_MANAGER_Initialize
  1982 ;;		_TMR0_Initialize
  1983 ;;		_WDT_Initialize
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           
  1990                           ;psect for function _SYSTEM_Initialize
  1991  04BC                     _SYSTEM_Initialize:	
  1992                           
  1993                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  1994                           
  1995                           ;incstack = 0
  1996                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1997  04BC  3184  247D  3184   	fcall	_PIN_MANAGER_Initialize
  1998                           
  1999                           ;mcc.c: 54: OSCILLATOR_Initialize();
  2000  04BF  3185  2532  3184   	fcall	_OSCILLATOR_Initialize
  2001                           
  2002                           ;mcc.c: 55: WDT_Initialize();
  2003  04C2  3185  2583  3184   	fcall	_WDT_Initialize
  2004                           
  2005                           ;mcc.c: 56: TMR0_Initialize();
  2006  04C5  3184  2493  3184   	fcall	_TMR0_Initialize
  2007                           
  2008                           ;mcc.c: 57: EUSART_Initialize();
  2009  04C8  3182  22B7  3184   	fcall	_EUSART_Initialize
  2010                           
  2011                           ;mcc.c: 58: LIN_Slave_Initialize();
  2012  04CB  3185  251A         	fcall	_LIN_Slave_Initialize
  2013  04CD  0008               	return
  2014  04CE                     __end_of_SYSTEM_Initialize:	
  2015                           
  2016                           	psect	text2
  2017  0583                     __ptext2:	
  2018 ;; *************** function _WDT_Initialize *****************
  2019 ;; Defined at:
  2020 ;;		line 71 in file "mcc_generated_files/mcc.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2038 ;;Total ram usage:        0 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    4
  2041 ;; This function calls:
  2042 ;;		Nothing
  2043 ;; This function is called by:
  2044 ;;		_SYSTEM_Initialize
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           
  2049                           ;psect for function _WDT_Initialize
  2050  0583                     _WDT_Initialize:	
  2051                           
  2052                           ;mcc.c: 74: WDTCON = 0x16;
  2053                           
  2054                           ;incstack = 0
  2055                           ; Regs used in _WDT_Initialize: [wreg]
  2056  0583  3016               	movlw	22
  2057  0584  0021               	movlb	1	; select bank1
  2058  0585  0097               	movwf	23	;volatile
  2059  0586  0008               	return
  2060  0587                     __end_of_WDT_Initialize:	
  2061                           
  2062                           	psect	text3
  2063  0493                     __ptext3:	
  2064 ;; *************** function _TMR0_Initialize *****************
  2065 ;; Defined at:
  2066 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		wreg, status,2, status,0, pclath, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2083 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2084 ;;Total ram usage:        1 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    5
  2087 ;; This function calls:
  2088 ;;		_TMR0_SetInterruptHandler
  2089 ;; This function is called by:
  2090 ;;		_SYSTEM_Initialize
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           
  2095                           ;psect for function _TMR0_Initialize
  2096  0493                     _TMR0_Initialize:	
  2097                           
  2098                           ;tmr0.c: 69: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD2 & 0x3F));
  2099                           
  2100                           ;incstack = 0
  2101                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2102  0493  0021               	movlb	1	; select bank1
  2103  0494  0815               	movf	21,w	;volatile
  2104  0495  39C0               	andlw	192
  2105  0496  3812               	iorlw	18
  2106  0497  0095               	movwf	21	;volatile
  2107                           
  2108                           ;tmr0.c: 72: TMR0 = 0x06;
  2109  0498  3006               	movlw	6
  2110  0499  0020               	movlb	0	; select bank0
  2111  049A  0095               	movwf	21	;volatile
  2112                           
  2113                           ;tmr0.c: 75: timer0ReloadVal= 6;
  2114  049B  3006               	movlw	6
  2115  049C  00F4               	movwf	??_TMR0_Initialize
  2116  049D  0874               	movf	??_TMR0_Initialize,w
  2117  049E  00E0               	movwf	_timer0ReloadVal	;volatile
  2118                           
  2119                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
  2120  049F  110B               	bcf	11,2	;volatile
  2121                           
  2122                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
  2123  04A0  168B               	bsf	11,5	;volatile
  2124                           
  2125                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2126  04A1  3095               	movlw	low _TMR0_DefaultInterruptHandler
  2127  04A2  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2128  04A3  3005               	movlw	high _TMR0_DefaultInterruptHandler
  2129  04A4  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2130  04A5  3185  2546         	fcall	_TMR0_SetInterruptHandler
  2131  04A7  0008               	return
  2132  04A8                     __end_of_TMR0_Initialize:	
  2133                           
  2134                           	psect	text4
  2135  047D                     __ptext4:	
  2136 ;; *************** function _PIN_MANAGER_Initialize *****************
  2137 ;; Defined at:
  2138 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2156 ;;Total ram usage:        0 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    4
  2159 ;; This function calls:
  2160 ;;		Nothing
  2161 ;; This function is called by:
  2162 ;;		_SYSTEM_Initialize
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _PIN_MANAGER_Initialize
  2168  047D                     _PIN_MANAGER_Initialize:	
  2169                           
  2170                           ;pin_manager.c: 62: LATA = 0x00;
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2174  047D  0022               	movlb	2	; select bank2
  2175  047E  018C               	clrf	12	;volatile
  2176                           
  2177                           ;pin_manager.c: 63: LATC = 0x00;
  2178  047F  018E               	clrf	14	;volatile
  2179                           
  2180                           ;pin_manager.c: 68: TRISA = 0x3F;
  2181  0480  303F               	movlw	63
  2182  0481  0021               	movlb	1	; select bank1
  2183  0482  008C               	movwf	12	;volatile
  2184                           
  2185                           ;pin_manager.c: 69: TRISC = 0x3F;
  2186  0483  303F               	movlw	63
  2187  0484  008E               	movwf	14	;volatile
  2188                           
  2189                           ;pin_manager.c: 74: ANSELC = 0x0F;
  2190  0485  300F               	movlw	15
  2191  0486  0023               	movlb	3	; select bank3
  2192  0487  008E               	movwf	14	;volatile
  2193                           
  2194                           ;pin_manager.c: 75: ANSELA = 0x17;
  2195  0488  3017               	movlw	23
  2196  0489  008C               	movwf	12	;volatile
  2197                           
  2198                           ;pin_manager.c: 80: WPUA = 0x00;
  2199  048A  0024               	movlb	4	; select bank4
  2200  048B  018C               	clrf	12	;volatile
  2201                           
  2202                           ;pin_manager.c: 81: WPUC = 0x00;
  2203  048C  018E               	clrf	14	;volatile
  2204                           
  2205                           ;pin_manager.c: 82: OPTION_REGbits.nWPUEN = 1;
  2206  048D  0021               	movlb	1	; select bank1
  2207  048E  1795               	bsf	21,7	;volatile
  2208                           
  2209                           ;pin_manager.c: 89: APFCON0 = 0x00;
  2210  048F  0022               	movlb	2	; select bank2
  2211  0490  019D               	clrf	29	;volatile
  2212                           
  2213                           ;pin_manager.c: 90: APFCON1 = 0x00;
  2214  0491  019E               	clrf	30	;volatile
  2215  0492  0008               	return
  2216  0493                     __end_of_PIN_MANAGER_Initialize:	
  2217                           
  2218                           	psect	text5
  2219  0532                     __ptext5:	
  2220 ;; *************** function _OSCILLATOR_Initialize *****************
  2221 ;; Defined at:
  2222 ;;		line 61 in file "mcc_generated_files/mcc.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2240 ;;Total ram usage:        0 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    4
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_SYSTEM_Initialize
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           
  2251                           ;psect for function _OSCILLATOR_Initialize
  2252  0532                     _OSCILLATOR_Initialize:	
  2253                           
  2254                           ;mcc.c: 64: OSCCON = 0x72;
  2255                           
  2256                           ;incstack = 0
  2257                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2258  0532  3072               	movlw	114
  2259  0533  0021               	movlb	1	; select bank1
  2260  0534  0099               	movwf	25	;volatile
  2261                           
  2262                           ;mcc.c: 66: OSCTUNE = 0x00;
  2263  0535  0198               	clrf	24	;volatile
  2264                           
  2265                           ;mcc.c: 68: BORCON = 0x00;
  2266  0536  0022               	movlb	2	; select bank2
  2267  0537  0196               	clrf	22	;volatile
  2268  0538  0008               	return
  2269  0539                     __end_of_OSCILLATOR_Initialize:	
  2270                           
  2271                           	psect	text6
  2272  051A                     __ptext6:	
  2273 ;; *************** function _LIN_Slave_Initialize *****************
  2274 ;; Defined at:
  2275 ;;		line 45 in file "mcc_generated_files/LINDrivers/lin_app.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;		None
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, status,2, status,0, pclath, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2293 ;;Total ram usage:        0 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    7
  2296 ;; This function calls:
  2297 ;;		_LIN_init
  2298 ;; This function is called by:
  2299 ;;		_SYSTEM_Initialize
  2300 ;;		_main
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           
  2305                           ;psect for function _LIN_Slave_Initialize
  2306  051A                     _LIN_Slave_Initialize:	
  2307                           
  2308                           ;lin_app.c: 47: LIN_init((sizeof(scheduleTable)/sizeof(lin_rx_cmd_t)), scheduleTable, pr
      +                          ocessLIN);
  2309                           
  2310                           ;incstack = 0
  2311                           ; Regs used in _LIN_Slave_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2312  051A  30DF               	movlw	low (_scheduleTable| (0+32768))
  2313  051B  00F4               	movwf	LIN_init@command
  2314  051C  3084               	movlw	high (_scheduleTable| (0+32768))
  2315  051D  00F5               	movwf	LIN_init@command+1
  2316  051E  3077               	movlw	low _processLIN
  2317  051F  00F6               	movwf	LIN_init@processData
  2318  0520  3003               	movlw	high _processLIN
  2319  0521  00F7               	movwf	LIN_init@processData+1
  2320  0522  3004               	movlw	4
  2321  0523  3184  244F         	fcall	_LIN_init
  2322  0525  0008               	return
  2323  0526                     __end_of_LIN_Slave_Initialize:	
  2324                           
  2325                           	psect	text7
  2326  044F                     __ptext7:	
  2327 ;; *************** function _LIN_init *****************
  2328 ;; Defined at:
  2329 ;;		line 57 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  2330 ;; Parameters:    Size  Location     Type
  2331 ;;  tableLength     1    wreg     unsigned char 
  2332 ;;  command         2    4[COMMON] const PTR const struct .
  2333 ;;		 -> scheduleTable(16), 
  2334 ;;  processData     2    6[COMMON] PTR FTN()void 
  2335 ;;		 -> processLIN(1), 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  tableLength     1    9[COMMON] unsigned char 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, status,2, status,0, pclath, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2350 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2351 ;;Total ram usage:        6 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    6
  2354 ;; This function calls:
  2355 ;;		_LIN_enableRx
  2356 ;;		_LIN_setTimerHandler
  2357 ;;		_LIN_stopTimer
  2358 ;; This function is called by:
  2359 ;;		_LIN_Slave_Initialize
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           
  2364                           ;psect for function _LIN_init
  2365  044F                     _LIN_init:	
  2366                           
  2367                           ;incstack = 0
  2368                           ; Regs used in _LIN_init: [wreg+status,2+status,0+pclath+cstack]
  2369                           ;LIN_init@tableLength stored from wreg
  2370  044F  00F9               	movwf	LIN_init@tableLength
  2371                           
  2372                           ;lin_slave.c: 58: LIN_rxCommand = command;
  2373  0450  0875               	movf	LIN_init@command+1,w
  2374  0451  0020               	movlb	0	; select bank0
  2375  0452  00D8               	movwf	_LIN_rxCommand+1
  2376  0453  0874               	movf	LIN_init@command,w
  2377  0454  00D7               	movwf	_LIN_rxCommand
  2378                           
  2379                           ;lin_slave.c: 59: LIN_rxCommandLength = tableLength;
  2380  0455  0879               	movf	LIN_init@tableLength,w
  2381  0456  00F8               	movwf	??_LIN_init
  2382  0457  0878               	movf	??_LIN_init,w
  2383  0458  00E1               	movwf	_LIN_rxCommandLength
  2384                           
  2385                           ;lin_slave.c: 60: LIN_processData = processData;
  2386  0459  0877               	movf	LIN_init@processData+1,w
  2387  045A  00DA               	movwf	_LIN_processData+1
  2388  045B  0876               	movf	LIN_init@processData,w
  2389  045C  00D9               	movwf	_LIN_processData
  2390                           
  2391                           ;lin_slave.c: 61: LIN_stopTimer();
  2392  045D  3185  256A  3184   	fcall	_LIN_stopTimer
  2393                           
  2394                           ;lin_slave.c: 62: LIN_enableRx();
  2395  0460  3185  2574  3184   	fcall	_LIN_enableRx
  2396                           
  2397                           ;lin_slave.c: 63: LIN_setTimerHandler();
  2398  0463  3185  2539         	fcall	_LIN_setTimerHandler
  2399  0465  0008               	return
  2400  0466                     __end_of_LIN_init:	
  2401                           
  2402                           	psect	text8
  2403  0539                     __ptext8:	
  2404 ;; *************** function _LIN_setTimerHandler *****************
  2405 ;; Defined at:
  2406 ;;		line 300 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, pclath, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2424 ;;Total ram usage:        0 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    5
  2427 ;; This function calls:
  2428 ;;		_TMR0_SetInterruptHandler
  2429 ;; This function is called by:
  2430 ;;		_LIN_init
  2431 ;; This function uses a non-reentrant model
  2432 ;;
  2433                           
  2434                           
  2435                           ;psect for function _LIN_setTimerHandler
  2436  0539                     _LIN_setTimerHandler:	
  2437                           
  2438                           ;lin_slave.c: 301: TMR0_SetInterruptHandler(LIN_timerHandler);
  2439                           
  2440                           ;incstack = 0
  2441                           ; Regs used in _LIN_setTimerHandler: [wreg+status,2+status,0+pclath+cstack]
  2442  0539  3026               	movlw	low _LIN_timerHandler
  2443  053A  00F2               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  2444  053B  3005               	movlw	high _LIN_timerHandler
  2445  053C  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  2446  053D  3185  2546         	fcall	_TMR0_SetInterruptHandler
  2447  053F  0008               	return
  2448  0540                     __end_of_LIN_setTimerHandler:	
  2449                           
  2450                           	psect	text9
  2451  0546                     __ptext9:	
  2452 ;; *************** function _TMR0_SetInterruptHandler *****************
  2453 ;; Defined at:
  2454 ;;		line 125 in file "mcc_generated_files/tmr0.c"
  2455 ;; Parameters:    Size  Location     Type
  2456 ;;  InterruptHan    2    2[COMMON] PTR FTN()void 
  2457 ;;		 -> TMR0_DefaultInterruptHandler(1), LIN_timerHandler(1), 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		wreg
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2472 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2473 ;;Total ram usage:        2 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    4
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_LIN_setTimerHandler
  2480 ;;		_TMR0_Initialize
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           
  2485                           ;psect for function _TMR0_SetInterruptHandler
  2486  0546                     _TMR0_SetInterruptHandler:	
  2487                           
  2488                           ;tmr0.c: 126: TMR0_InterruptHandler = InterruptHandler;
  2489                           
  2490                           ;incstack = 0
  2491                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  2492  0546  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  2493  0547  0020               	movlb	0	; select bank0
  2494  0548  00D6               	movwf	_TMR0_InterruptHandler+1
  2495  0549  0872               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  2496  054A  00D5               	movwf	_TMR0_InterruptHandler
  2497  054B  0008               	return
  2498  054C                     __end_of_TMR0_SetInterruptHandler:	
  2499                           
  2500                           	psect	text10
  2501  02B7                     __ptext10:	
  2502 ;; *************** function _EUSART_Initialize *****************
  2503 ;; Defined at:
  2504 ;;		line 85 in file "mcc_generated_files/eusart.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      void 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, pclath, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2522 ;;Total ram usage:        1 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    5
  2525 ;; This function calls:
  2526 ;;		_EUSART_SetErrorHandler
  2527 ;;		_EUSART_SetFramingErrorHandler
  2528 ;;		_EUSART_SetOverrunErrorHandler
  2529 ;;		_EUSART_SetRxInterruptHandler
  2530 ;;		_EUSART_SetTxInterruptHandler
  2531 ;; This function is called by:
  2532 ;;		_SYSTEM_Initialize
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           
  2537                           ;psect for function _EUSART_Initialize
  2538  02B7                     _EUSART_Initialize:	
  2539                           
  2540                           ;eusart.c: 88: PIE1bits.RCIE = 0;
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2544  02B7  0021               	movlb	1	; select bank1
  2545  02B8  1291               	bcf	17,5	;volatile
  2546                           
  2547                           ;eusart.c: 89: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2548  02B9  30F5               	movlw	low _EUSART_Receive_ISR
  2549  02BA  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2550  02BB  3002               	movlw	high _EUSART_Receive_ISR
  2551  02BC  00F3               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2552  02BD  3185  2552  3182   	fcall	_EUSART_SetRxInterruptHandler
  2553                           
  2554                           ;eusart.c: 90: PIE1bits.TXIE = 0;
  2555  02C0  0021               	movlb	1	; select bank1
  2556  02C1  1211               	bcf	17,4	;volatile
  2557                           
  2558                           ;eusart.c: 91: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
  2559  02C2  3000               	movlw	low _EUSART_Transmit_ISR
  2560  02C3  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  2561  02C4  3004               	movlw	high _EUSART_Transmit_ISR
  2562  02C5  00F3               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  2563  02C6  3185  254C  3182   	fcall	_EUSART_SetTxInterruptHandler
  2564                           
  2565                           ;eusart.c: 95: BAUDCON = 0x08;
  2566  02C9  3008               	movlw	8
  2567  02CA  0023               	movlb	3	; select bank3
  2568  02CB  009F               	movwf	31	;volatile
  2569                           
  2570                           ;eusart.c: 98: RCSTA = 0x90;
  2571  02CC  3090               	movlw	144
  2572  02CD  009D               	movwf	29	;volatile
  2573                           
  2574                           ;eusart.c: 101: TXSTA = 0x24;
  2575  02CE  3024               	movlw	36
  2576  02CF  009E               	movwf	30	;volatile
  2577                           
  2578                           ;eusart.c: 104: SPBRGL = 0xCF;
  2579  02D0  30CF               	movlw	207
  2580  02D1  009B               	movwf	27	;volatile
  2581                           
  2582                           ;eusart.c: 107: SPBRGH = 0x00;
  2583  02D2  019C               	clrf	28	;volatile
  2584                           
  2585                           ;eusart.c: 110: EUSART_SetFramingErrorHandler(EUSART_DefaultFramingErrorHandler);
  2586  02D3  3096               	movlw	low _EUSART_DefaultFramingErrorHandler
  2587  02D4  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  2588  02D5  3005               	movlw	high _EUSART_DefaultFramingErrorHandler
  2589  02D6  00F3               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  2590  02D7  3185  255E  3182   	fcall	_EUSART_SetFramingErrorHandler
  2591                           
  2592                           ;eusart.c: 111: EUSART_SetOverrunErrorHandler(EUSART_DefaultOverrunErrorHandler);
  2593  02DA  3087               	movlw	low _EUSART_DefaultOverrunErrorHandler
  2594  02DB  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  2595  02DC  3005               	movlw	high _EUSART_DefaultOverrunErrorHandler
  2596  02DD  00F3               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  2597  02DE  3185  2558  3182   	fcall	_EUSART_SetOverrunErrorHandler
  2598                           
  2599                           ;eusart.c: 112: EUSART_SetErrorHandler(EUSART_DefaultErrorHandler);
  2600  02E1  3091               	movlw	low _EUSART_DefaultErrorHandler
  2601  02E2  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler
  2602  02E3  3005               	movlw	high _EUSART_DefaultErrorHandler
  2603  02E4  00F3               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  2604  02E5  3185  2564         	fcall	_EUSART_SetErrorHandler
  2605                           
  2606                           ;eusart.c: 114: eusartRxLastError.status = 0;
  2607  02E7  0020               	movlb	0	; select bank0
  2608  02E8  01B8               	clrf	_eusartRxLastError	;volatile
  2609                           
  2610                           ;eusart.c: 117: eusartTxHead = 0;
  2611  02E9  01BB               	clrf	_eusartTxHead	;volatile
  2612                           
  2613                           ;eusart.c: 118: eusartTxTail = 0;
  2614  02EA  01BA               	clrf	_eusartTxTail	;volatile
  2615                           
  2616                           ;eusart.c: 119: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  2617  02EB  3008               	movlw	8
  2618  02EC  00F4               	movwf	??_EUSART_Initialize
  2619  02ED  0874               	movf	??_EUSART_Initialize,w
  2620  02EE  00DF               	movwf	_eusartTxBufferRemaining	;volatile
  2621                           
  2622                           ;eusart.c: 121: eusartRxHead = 0;
  2623  02EF  01FB               	clrf	_eusartRxHead	;volatile
  2624                           
  2625                           ;eusart.c: 122: eusartRxTail = 0;
  2626  02F0  01FA               	clrf	_eusartRxTail	;volatile
  2627                           
  2628                           ;eusart.c: 123: eusartRxCount = 0;
  2629  02F1  01B9               	clrf	_eusartRxCount	;volatile
  2630                           
  2631                           ;eusart.c: 126: PIE1bits.RCIE = 1;
  2632  02F2  0021               	movlb	1	; select bank1
  2633  02F3  1691               	bsf	17,5	;volatile
  2634  02F4  0008               	return
  2635  02F5                     __end_of_EUSART_Initialize:	
  2636                           
  2637                           	psect	text11
  2638  054C                     __ptext11:	
  2639 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  2640 ;; Defined at:
  2641 ;;		line 273 in file "mcc_generated_files/eusart.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2644 ;;		 -> EUSART_Transmit_ISR(1), 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  1    wreg      void 
  2649 ;; Registers used:
  2650 ;;		wreg
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2659 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2660 ;;Total ram usage:        2 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    4
  2663 ;; This function calls:
  2664 ;;		Nothing
  2665 ;; This function is called by:
  2666 ;;		_EUSART_Initialize
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           
  2671                           ;psect for function _EUSART_SetTxInterruptHandler
  2672  054C                     _EUSART_SetTxInterruptHandler:	
  2673                           
  2674                           ;eusart.c: 274: EUSART_TxDefaultInterruptHandler = interruptHandler;
  2675                           
  2676                           ;incstack = 0
  2677                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  2678  054C  0873               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  2679  054D  0020               	movlb	0	; select bank0
  2680  054E  00DE               	movwf	_EUSART_TxDefaultInterruptHandler+1
  2681  054F  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  2682  0550  00DD               	movwf	_EUSART_TxDefaultInterruptHandler
  2683  0551  0008               	return
  2684  0552                     __end_of_EUSART_SetTxInterruptHandler:	
  2685                           
  2686                           	psect	text12
  2687  0552                     __ptext12:	
  2688 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2689 ;; Defined at:
  2690 ;;		line 277 in file "mcc_generated_files/eusart.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2693 ;;		 -> EUSART_Receive_ISR(1), 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2705 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2708 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2709 ;;Total ram usage:        2 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    4
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_EUSART_Initialize
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _EUSART_SetRxInterruptHandler
  2721  0552                     _EUSART_SetRxInterruptHandler:	
  2722                           
  2723                           ;eusart.c: 278: EUSART_RxDefaultInterruptHandler = interruptHandler;
  2724                           
  2725                           ;incstack = 0
  2726                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2727  0552  0873               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2728  0553  0020               	movlb	0	; select bank0
  2729  0554  00DC               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2730  0555  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2731  0556  00DB               	movwf	_EUSART_RxDefaultInterruptHandler
  2732  0557  0008               	return
  2733  0558                     __end_of_EUSART_SetRxInterruptHandler:	
  2734                           
  2735                           	psect	text13
  2736  0558                     __ptext13:	
  2737 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  2738 ;; Defined at:
  2739 ;;		line 265 in file "mcc_generated_files/eusart.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2742 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2758 ;;Total ram usage:        2 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    4
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_EUSART_Initialize
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           
  2769                           ;psect for function _EUSART_SetOverrunErrorHandler
  2770  0558                     _EUSART_SetOverrunErrorHandler:	
  2771                           
  2772                           ;eusart.c: 266: EUSART_OverrunErrorHandler = interruptHandler;
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  2776  0558  0873               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  2777  0559  0020               	movlb	0	; select bank0
  2778  055A  00D2               	movwf	_EUSART_OverrunErrorHandler+1
  2779  055B  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  2780  055C  00D1               	movwf	_EUSART_OverrunErrorHandler
  2781  055D  0008               	return
  2782  055E                     __end_of_EUSART_SetOverrunErrorHandler:	
  2783                           
  2784                           	psect	text14
  2785  055E                     __ptext14:	
  2786 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  2787 ;; Defined at:
  2788 ;;		line 261 in file "mcc_generated_files/eusart.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2791 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2807 ;;Total ram usage:        2 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    4
  2810 ;; This function calls:
  2811 ;;		Nothing
  2812 ;; This function is called by:
  2813 ;;		_EUSART_Initialize
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           
  2818                           ;psect for function _EUSART_SetFramingErrorHandler
  2819  055E                     _EUSART_SetFramingErrorHandler:	
  2820                           
  2821                           ;eusart.c: 262: EUSART_FramingErrorHandler = interruptHandler;
  2822                           
  2823                           ;incstack = 0
  2824                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  2825  055E  0873               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  2826  055F  0020               	movlb	0	; select bank0
  2827  0560  00D4               	movwf	_EUSART_FramingErrorHandler+1
  2828  0561  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  2829  0562  00D3               	movwf	_EUSART_FramingErrorHandler
  2830  0563  0008               	return
  2831  0564                     __end_of_EUSART_SetFramingErrorHandler:	
  2832                           
  2833                           	psect	text15
  2834  0564                     __ptext15:	
  2835 ;; *************** function _EUSART_SetErrorHandler *****************
  2836 ;; Defined at:
  2837 ;;		line 269 in file "mcc_generated_files/eusart.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  interruptHan    2    2[COMMON] PTR FTN()void 
  2840 ;;		 -> EUSART_DefaultErrorHandler(1), 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2856 ;;Total ram usage:        2 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    4
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_EUSART_Initialize
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           
  2867                           ;psect for function _EUSART_SetErrorHandler
  2868  0564                     _EUSART_SetErrorHandler:	
  2869                           
  2870                           ;eusart.c: 270: EUSART_ErrorHandler = interruptHandler;
  2871                           
  2872                           ;incstack = 0
  2873                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  2874  0564  0873               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  2875  0565  0021               	movlb	1	; select bank1
  2876  0566  00AC               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  2877  0567  0872               	movf	EUSART_SetErrorHandler@interruptHandler,w
  2878  0568  00AB               	movwf	_EUSART_ErrorHandler^(0+128)
  2879  0569  0008               	return
  2880  056A                     __end_of_EUSART_SetErrorHandler:	
  2881                           
  2882                           	psect	text16
  2883  0049                     __ptext16:	
  2884 ;; *************** function _LIN_handler *****************
  2885 ;; Defined at:
  2886 ;;		line 91 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;		None
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      enum E119
  2893 ;; Registers used:
  2894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2903 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2904 ;;Total ram usage:        3 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    7
  2907 ;; This function calls:
  2908 ;;		Absolute function
  2909 ;;		_EUSART_Read
  2910 ;;		_EUSART_is_rx_ready
  2911 ;;		_LIN_breakCheck
  2912 ;;		_LIN_checkPID
  2913 ;;		_LIN_disableRx
  2914 ;;		_LIN_enableRx
  2915 ;;		_LIN_getChecksum
  2916 ;;		_LIN_getFromTable
  2917 ;;		_LIN_queuePacket
  2918 ;;		_LIN_startTimer
  2919 ;;		_LIN_stopTimer
  2920 ;;		_memset
  2921 ;;		_processLIN
  2922 ;; This function is called by:
  2923 ;;		_main
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function _LIN_handler
  2929  0049                     _LIN_handler:	
  2930                           
  2931                           ;lin_slave.c: 92: static lin_rx_state_t LIN_rxState = LIN_RX_IDLE;
  2932                           ;lin_slave.c: 93: static uint8_t rxDataIndex = 0;
  2933                           ;lin_slave.c: 95: if(LIN_rxInProgress == 1){
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _LIN_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2937  0049  0020               	movlb	0	; select bank0
  2938  004A  0340               	decf	_LIN_rxInProgress,w
  2939  004B  1D03               	btfss	3,2
  2940  004C  2970               	goto	l2219
  2941                           
  2942                           ;lin_slave.c: 96: if(LIN_timerRunning == 0){
  2943  004D  083F               	movf	_LIN_timerRunning,w
  2944  004E  1D03               	btfss	3,2
  2945  004F  2970               	goto	l2219
  2946                           
  2947                           ;lin_slave.c: 98: LIN_rxState = LIN_RX_ERROR;
  2948  0050  3008               	movlw	8
  2949  0051  0021               	movlb	1	; select bank1
  2950  0052  00A8               	movwf	??_LIN_handler^(0+128)
  2951  0053  0828               	movf	??_LIN_handler^(0+128),w
  2952  0054  0020               	movlb	0	; select bank0
  2953  0055  00BD               	movwf	LIN_handler@LIN_rxState
  2954                           
  2955                           ;lin_slave.c: 99: }
  2956                           ;lin_slave.c: 100: }
  2957                           ;lin_slave.c: 102: switch(LIN_rxState){
  2958  0056  2970               	goto	l2219
  2959  0057                     l2133:	
  2960                           ;lin_slave.c: 103: case LIN_RX_IDLE:
  2961                           
  2962                           
  2963                           ;lin_slave.c: 104: if(EUSART_is_rx_ready() > 0){
  2964  0057  3185  258E  3180   	fcall	_EUSART_is_rx_ready
  2965  005A  3A00               	xorlw	0
  2966  005B  1903               	skipnz
  2967  005C  0008               	return
  2968                           
  2969                           ;lin_slave.c: 106: LIN_startTimer(15);
  2970  005D  300F               	movlw	15
  2971  005E  3184  24FE         	fcall	_LIN_startTimer
  2972                           
  2973                           ;lin_slave.c: 107: LIN_rxInProgress = 1;
  2974  0060  0020               	movlb	0	; select bank0
  2975  0061  01C0               	clrf	_LIN_rxInProgress
  2976  0062  0AC0               	incf	_LIN_rxInProgress,f
  2977                           
  2978                           ;lin_slave.c: 108: LIN_rxState = LIN_RX_BREAK;
  2979  0063  01BD               	clrf	LIN_handler@LIN_rxState
  2980  0064  0ABD               	incf	LIN_handler@LIN_rxState,f
  2981                           
  2982                           ;lin_slave.c: 109: }
  2983                           ;lin_slave.c: 110: break;
  2984  0065  0008               	return
  2985  0066                     l2141:	
  2986                           ;lin_slave.c: 111: case LIN_RX_BREAK:
  2987                           
  2988                           
  2989                           ;lin_slave.c: 112: if(EUSART_is_rx_ready() > 0){
  2990  0066  3185  258E  3180   	fcall	_EUSART_is_rx_ready
  2991  0069  3A00               	xorlw	0
  2992  006A  1903               	skipnz
  2993  006B  0008               	return
  2994                           
  2995                           ;lin_slave.c: 113: if(LIN_breakCheck() == 1){
  2996  006C  3184  24EF  3180   	fcall	_LIN_breakCheck
  2997  006F  3A01               	xorlw	1
  2998  0070  1D03               	skipz
  2999  0071  2879               	goto	l2147
  3000                           
  3001                           ;lin_slave.c: 114: LIN_rxState = LIN_RX_SYNC;
  3002  0072  3002               	movlw	2
  3003  0073  0021               	movlb	1	; select bank1
  3004  0074  00A8               	movwf	??_LIN_handler^(0+128)
  3005  0075  0828               	movf	??_LIN_handler^(0+128),w
  3006  0076  0020               	movlb	0	; select bank0
  3007  0077  00BD               	movwf	LIN_handler@LIN_rxState
  3008                           
  3009                           ;lin_slave.c: 115: } else {
  3010  0078  0008               	return
  3011  0079                     l2147:	
  3012                           
  3013                           ;lin_slave.c: 116: LIN_rxState = LIN_RX_ERROR;
  3014  0079  3008               	movlw	8
  3015  007A  0021               	movlb	1	; select bank1
  3016  007B  00A8               	movwf	??_LIN_handler^(0+128)
  3017  007C  0828               	movf	??_LIN_handler^(0+128),w
  3018  007D  0020               	movlb	0	; select bank0
  3019  007E  00BD               	movwf	LIN_handler@LIN_rxState
  3020                           
  3021                           ;lin_slave.c: 117: }
  3022                           ;lin_slave.c: 118: }
  3023                           ;lin_slave.c: 119: break;
  3024  007F  0008               	return
  3025  0080                     l2149:	
  3026                           ;lin_slave.c: 120: case LIN_RX_SYNC:
  3027                           
  3028                           
  3029                           ;lin_slave.c: 121: if(EUSART_is_rx_ready() > 0){
  3030  0080  3185  258E  3180   	fcall	_EUSART_is_rx_ready
  3031  0083  3A00               	xorlw	0
  3032  0084  1903               	skipnz
  3033  0085  0008               	return
  3034                           
  3035                           ;lin_slave.c: 122: if(EUSART_Read() == 0x55){
  3036  0086  3183  2351  3180   	fcall	_EUSART_Read
  3037  0089  3A55               	xorlw	85
  3038  008A  1D03               	skipz
  3039  008B  2893               	goto	l2155
  3040                           
  3041                           ;lin_slave.c: 123: LIN_rxState = LIN_RX_PID;
  3042  008C  3003               	movlw	3
  3043  008D  0021               	movlb	1	; select bank1
  3044  008E  00A8               	movwf	??_LIN_handler^(0+128)
  3045  008F  0828               	movf	??_LIN_handler^(0+128),w
  3046  0090  0020               	movlb	0	; select bank0
  3047  0091  00BD               	movwf	LIN_handler@LIN_rxState
  3048                           
  3049                           ;lin_slave.c: 124: } else {
  3050  0092  0008               	return
  3051  0093                     l2155:	
  3052                           
  3053                           ;lin_slave.c: 125: LIN_rxState = LIN_RX_ERROR;
  3054  0093  3008               	movlw	8
  3055  0094  0021               	movlb	1	; select bank1
  3056  0095  00A8               	movwf	??_LIN_handler^(0+128)
  3057  0096  0828               	movf	??_LIN_handler^(0+128),w
  3058  0097  0020               	movlb	0	; select bank0
  3059  0098  00BD               	movwf	LIN_handler@LIN_rxState
  3060                           
  3061                           ;lin_slave.c: 126: }
  3062                           ;lin_slave.c: 127: }
  3063                           ;lin_slave.c: 128: break;
  3064  0099  0008               	return
  3065  009A                     l2157:	
  3066                           ;lin_slave.c: 129: case LIN_RX_PID:
  3067                           
  3068                           
  3069                           ;lin_slave.c: 130: if(EUSART_is_rx_ready() > 0){
  3070  009A  3185  258E  3180   	fcall	_EUSART_is_rx_ready
  3071  009D  3A00               	xorlw	0
  3072  009E  1903               	skipnz
  3073  009F  0008               	return
  3074                           
  3075                           ;lin_slave.c: 131: LIN_packet.PID = EUSART_Read();
  3076  00A0  3183  2351  3180   	fcall	_EUSART_Read
  3077  00A3  0021               	movlb	1	; select bank1
  3078  00A4  00A8               	movwf	??_LIN_handler^(0+128)
  3079  00A5  0828               	movf	??_LIN_handler^(0+128),w
  3080  00A6  0020               	movlb	0	; select bank0
  3081  00A7  00C1               	movwf	_LIN_packet
  3082                           
  3083                           ;lin_slave.c: 134: if(LIN_checkPID(LIN_packet.PID) == 0){
  3084  00A8  0841               	movf	_LIN_packet,w
  3085  00A9  3184  2437  3180   	fcall	_LIN_checkPID
  3086  00AC  3A00               	xorlw	0
  3087  00AD  1D03               	skipz
  3088  00AE  28B6               	goto	l2165
  3089                           
  3090                           ;lin_slave.c: 135: LIN_rxState = LIN_RX_ERROR;
  3091  00AF  3008               	movlw	8
  3092  00B0  0021               	movlb	1	; select bank1
  3093  00B1  00A8               	movwf	??_LIN_handler^(0+128)
  3094  00B2  0828               	movf	??_LIN_handler^(0+128),w
  3095  00B3  0020               	movlb	0	; select bank0
  3096  00B4  00BD               	movwf	LIN_handler@LIN_rxState
  3097                           
  3098                           ;lin_slave.c: 136: break;
  3099  00B5  0008               	return
  3100  00B6                     l2165:	
  3101                           
  3102                           ;lin_slave.c: 137: }
  3103                           ;lin_slave.c: 138: LIN_packet.type = LIN_getFromTable(LIN_packet.PID, TYPE);
  3104  00B6  01F2               	clrf	LIN_getFromTable@param
  3105  00B7  0AF2               	incf	LIN_getFromTable@param,f
  3106  00B8  0020               	movlb	0	; select bank0
  3107  00B9  0841               	movf	_LIN_packet,w
  3108  00BA  3182  225C  3180   	fcall	_LIN_getFromTable
  3109  00BD  0021               	movlb	1	; select bank1
  3110  00BE  00A8               	movwf	??_LIN_handler^(0+128)
  3111  00BF  0828               	movf	??_LIN_handler^(0+128),w
  3112  00C0  0020               	movlb	0	; select bank0
  3113  00C1  00CB               	movwf	_LIN_packet+10
  3114                           
  3115                           ;lin_slave.c: 139: if(LIN_packet.type == RECEIVE){
  3116  00C2  034B               	decf	_LIN_packet+10,w
  3117  00C3  1D03               	btfss	3,2
  3118  00C4  28DA               	goto	l2173
  3119                           
  3120                           ;lin_slave.c: 140: LIN_packet.length = LIN_getFromTable(LIN_packet.PID, LENGTH);
  3121  00C5  3002               	movlw	2
  3122  00C6  0021               	movlb	1	; select bank1
  3123  00C7  00A8               	movwf	??_LIN_handler^(0+128)
  3124  00C8  0828               	movf	??_LIN_handler^(0+128),w
  3125  00C9  00F2               	movwf	LIN_getFromTable@param
  3126  00CA  0020               	movlb	0	; select bank0
  3127  00CB  0841               	movf	_LIN_packet,w
  3128  00CC  3182  225C         	fcall	_LIN_getFromTable
  3129  00CE  0021               	movlb	1	; select bank1
  3130  00CF  00A9               	movwf	(??_LIN_handler+1)^(0+128)
  3131  00D0  0829               	movf	(??_LIN_handler+1)^(0+128),w
  3132  00D1  0020               	movlb	0	; select bank0
  3133  00D2  00CC               	movwf	_LIN_packet+11
  3134                           
  3135                           ;lin_slave.c: 141: LIN_rxState = LIN_RX_DATA;
  3136  00D3  3004               	movlw	4
  3137  00D4  0021               	movlb	1	; select bank1
  3138  00D5  00A8               	movwf	??_LIN_handler^(0+128)
  3139  00D6  0828               	movf	??_LIN_handler^(0+128),w
  3140  00D7  0020               	movlb	0	; select bank0
  3141  00D8  00BD               	movwf	LIN_handler@LIN_rxState
  3142                           
  3143                           ;lin_slave.c: 142: }
  3144  00D9  0008               	return
  3145  00DA                     l2173:	
  3146                           
  3147                           ;lin_slave.c: 143: else{
  3148                           ;lin_slave.c: 144: LIN_disableRx();
  3149  00DA  3185  2579         	fcall	_LIN_disableRx
  3150                           
  3151                           ;lin_slave.c: 145: LIN_rxState = LIN_RX_TX_DATA;
  3152  00DC  3006               	movlw	6
  3153  00DD  0021               	movlb	1	; select bank1
  3154  00DE  00A8               	movwf	??_LIN_handler^(0+128)
  3155  00DF  0828               	movf	??_LIN_handler^(0+128),w
  3156  00E0  0020               	movlb	0	; select bank0
  3157  00E1  00BD               	movwf	LIN_handler@LIN_rxState
  3158                           
  3159                           ;lin_slave.c: 146: }
  3160                           ;lin_slave.c: 147: }
  3161                           ;lin_slave.c: 148: break;
  3162  00E2  0008               	return
  3163  00E3                     l2177:	
  3164                           ;lin_slave.c: 149: case LIN_RX_DATA:
  3165                           
  3166                           
  3167                           ;lin_slave.c: 150: if(EUSART_is_rx_ready() > 0){
  3168  00E3  3185  258E  3180   	fcall	_EUSART_is_rx_ready
  3169  00E6  3A00               	xorlw	0
  3170  00E7  1903               	skipnz
  3171  00E8  0008               	return
  3172                           
  3173                           ;lin_slave.c: 151: LIN_packet.data[rxDataIndex] = EUSART_Read();
  3174  00E9  3183  2351  3180   	fcall	_EUSART_Read
  3175  00EC  0021               	movlb	1	; select bank1
  3176  00ED  00A8               	movwf	??_LIN_handler^(0+128)
  3177  00EE  0020               	movlb	0	; select bank0
  3178  00EF  083C               	movf	LIN_handler@rxDataIndex,w
  3179  00F0  3E01               	addlw	1
  3180  00F1  3E41               	addlw	(low (_LIN_packet| 0))& (0+255)
  3181  00F2  0086               	movwf	6
  3182  00F3  0187               	clrf	7
  3183  00F4  0021               	movlb	1	; select bank1
  3184  00F5  0828               	movf	??_LIN_handler^(0+128),w
  3185  00F6  0081               	movwf	1
  3186                           
  3187                           ;lin_slave.c: 152: if(++rxDataIndex >= LIN_packet.length){
  3188  00F7  0020               	movlb	0	; select bank0
  3189  00F8  084C               	movf	_LIN_packet+11,w
  3190  00F9  0021               	movlb	1	; select bank1
  3191  00FA  00A8               	movwf	??_LIN_handler^(0+128)
  3192  00FB  01A9               	clrf	(??_LIN_handler^(0+128)+1)
  3193  00FC  1BA8               	btfsc	??_LIN_handler^(0+128),7
  3194  00FD  03A9               	decf	(??_LIN_handler^(0+128)+1),f
  3195  00FE  3001               	movlw	1
  3196  00FF  00AA               	movwf	(??_LIN_handler+2)^(0+128)
  3197  0100  082A               	movf	(??_LIN_handler+2)^(0+128),w
  3198  0101  0020               	movlb	0	; select bank0
  3199  0102  07BC               	addwf	LIN_handler@rxDataIndex,f
  3200  0103  0021               	movlb	1	; select bank1
  3201  0104  0829               	movf	(??_LIN_handler+1)^(0+128),w
  3202  0105  3A80               	xorlw	128
  3203  0106  3C80               	sublw	128
  3204  0107  1D03               	skipz
  3205  0108  290C               	goto	u1785
  3206  0109  0828               	movf	??_LIN_handler^(0+128),w
  3207  010A  0020               	movlb	0	; select bank0
  3208  010B  023C               	subwf	LIN_handler@rxDataIndex,w
  3209  010C                     u1785:	
  3210  010C  1C03               	skipc
  3211  010D  0008               	return
  3212                           
  3213                           ;lin_slave.c: 154: rxDataIndex = 0;
  3214  010E  0020               	movlb	0	; select bank0
  3215  010F  01BC               	clrf	LIN_handler@rxDataIndex
  3216                           
  3217                           ;lin_slave.c: 155: LIN_rxState = LIN_RX_CHECKSUM;
  3218  0110  3005               	movlw	5
  3219  0111  0021               	movlb	1	; select bank1
  3220  0112  00A8               	movwf	??_LIN_handler^(0+128)
  3221  0113  0828               	movf	??_LIN_handler^(0+128),w
  3222  0114  0020               	movlb	0	; select bank0
  3223  0115  00BD               	movwf	LIN_handler@LIN_rxState
  3224                           
  3225                           ;lin_slave.c: 156: }
  3226                           ;lin_slave.c: 157: }
  3227                           ;lin_slave.c: 158: break;
  3228  0116  0008               	return
  3229  0117                     l2187:	
  3230                           ;lin_slave.c: 159: case LIN_RX_CHECKSUM:
  3231                           
  3232                           
  3233                           ;lin_slave.c: 160: if(EUSART_is_rx_ready() > 0){
  3234  0117  3185  258E  3180   	fcall	_EUSART_is_rx_ready
  3235  011A  3A00               	xorlw	0
  3236  011B  1903               	skipnz
  3237  011C  0008               	return
  3238                           
  3239                           ;lin_slave.c: 161: LIN_packet.checksum = EUSART_Read();
  3240  011D  3183  2351  3180   	fcall	_EUSART_Read
  3241  0120  0021               	movlb	1	; select bank1
  3242  0121  00A8               	movwf	??_LIN_handler^(0+128)
  3243  0122  0828               	movf	??_LIN_handler^(0+128),w
  3244  0123  0020               	movlb	0	; select bank0
  3245  0124  00CA               	movwf	_LIN_packet+9
  3246                           
  3247                           ;lin_slave.c: 162: if(LIN_packet.checksum != LIN_getChecksum(LIN_packet.length, LIN_pack
      +                          et.data)) {
  3248  0125  3042               	movlw	(low ((_LIN_packet| 0+1)))& (0+255)
  3249  0126  0021               	movlb	1	; select bank1
  3250  0127  00A8               	movwf	??_LIN_handler^(0+128)
  3251  0128  0828               	movf	??_LIN_handler^(0+128),w
  3252  0129  00F2               	movwf	LIN_getChecksum@data
  3253  012A  0020               	movlb	0	; select bank0
  3254  012B  084C               	movf	_LIN_packet+11,w
  3255  012C  3183  2327  3180   	fcall	_LIN_getChecksum
  3256  012F  0020               	movlb	0	; select bank0
  3257  0130  064A               	xorwf	_LIN_packet+9,w
  3258  0131  1903               	skipnz
  3259  0132  293A               	goto	l2193
  3260                           
  3261                           ;lin_slave.c: 163: LIN_rxState = LIN_RX_ERROR;
  3262  0133  3008               	movlw	8
  3263  0134  0021               	movlb	1	; select bank1
  3264  0135  00A8               	movwf	??_LIN_handler^(0+128)
  3265  0136  0828               	movf	??_LIN_handler^(0+128),w
  3266  0137  0020               	movlb	0	; select bank0
  3267  0138  00BD               	movwf	LIN_handler@LIN_rxState
  3268                           
  3269                           ;lin_slave.c: 164: }
  3270  0139  0008               	return
  3271  013A                     l2193:	
  3272                           
  3273                           ;lin_slave.c: 165: else {
  3274                           ;lin_slave.c: 166: LIN_rxState = LIN_RX_RDY;
  3275  013A  3007               	movlw	7
  3276  013B  0021               	movlb	1	; select bank1
  3277  013C  00A8               	movwf	??_LIN_handler^(0+128)
  3278  013D  0828               	movf	??_LIN_handler^(0+128),w
  3279  013E  0020               	movlb	0	; select bank0
  3280  013F  00BD               	movwf	LIN_handler@LIN_rxState
  3281                           
  3282                           ;lin_slave.c: 167: }
  3283                           ;lin_slave.c: 168: }
  3284                           ;lin_slave.c: 169: break;
  3285  0140  0008               	return
  3286  0141                     l2195:	
  3287                           ;lin_slave.c: 170: case LIN_RX_TX_DATA:
  3288                           
  3289                           
  3290                           ;lin_slave.c: 171: LIN_queuePacket(LIN_packet.PID);
  3291  0141  0841               	movf	_LIN_packet,w
  3292  0142  3181  21F0  3180   	fcall	_LIN_queuePacket
  3293                           
  3294                           ;lin_slave.c: 172: LIN_rxState = LIN_RX_RDY;
  3295  0145  3007               	movlw	7
  3296  0146  0021               	movlb	1	; select bank1
  3297  0147  00A8               	movwf	??_LIN_handler^(0+128)
  3298  0148  0828               	movf	??_LIN_handler^(0+128),w
  3299  0149  0020               	movlb	0	; select bank0
  3300  014A  00BD               	movwf	LIN_handler@LIN_rxState
  3301  014B                     l2199:	
  3302                           ;lin_slave.c: 173: case LIN_RX_RDY:
  3303                           
  3304                           
  3305                           ;lin_slave.c: 174: LIN_processData();
  3306  014B  085A               	movf	_LIN_processData+1,w
  3307  014C  008A               	movwf	10
  3308  014D  0859               	movf	_LIN_processData,w
  3309  014E  000A               	callw
  3310  014F  3180               	pagesel	$
  3311  0150                     l2201:	
  3312                           ;lin_slave.c: 175: case LIN_RX_ERROR:
  3313                           
  3314                           
  3315                           ;lin_slave.c: 176: LIN_stopTimer();
  3316  0150  3185  256A  3180   	fcall	_LIN_stopTimer
  3317                           
  3318                           ;lin_slave.c: 177: rxDataIndex = 0;
  3319  0153  0020               	movlb	0	; select bank0
  3320  0154  01BC               	clrf	LIN_handler@rxDataIndex
  3321                           
  3322                           ;lin_slave.c: 178: LIN_rxInProgress = 0;
  3323  0155  01C0               	clrf	_LIN_rxInProgress
  3324                           
  3325                           ;lin_slave.c: 179: memset(LIN_packet.rawPacket, 0, sizeof(LIN_packet.rawPacket));
  3326  0156  3000               	movlw	0
  3327  0157  00F2               	movwf	memset@c
  3328  0158  00F3               	movwf	memset@c+1
  3329  0159  300D               	movlw	13
  3330  015A  00F4               	movwf	memset@n
  3331  015B  3000               	movlw	0
  3332  015C  00F5               	movwf	memset@n+1
  3333  015D  3041               	movlw	(low (_LIN_packet| 0))& (0+255)
  3334  015E  3184  241D  3180   	fcall	_memset
  3335  0161                     l2209:	
  3336                           ;lin_slave.c: 180: case LIN_RX_WAIT:
  3337                           
  3338                           
  3339                           ;lin_slave.c: 181: if(TXSTAbits.TRMT){
  3340  0161  0023               	movlb	3	; select bank3
  3341  0162  1C9E               	btfss	30,1	;volatile
  3342  0163  2969               	goto	l2215
  3343                           
  3344                           ;lin_slave.c: 182: LIN_enableRx();
  3345  0164  3185  2574         	fcall	_LIN_enableRx
  3346                           
  3347                           ;lin_slave.c: 183: LIN_rxState = LIN_RX_IDLE;
  3348  0166  0020               	movlb	0	; select bank0
  3349  0167  01BD               	clrf	LIN_handler@LIN_rxState
  3350                           
  3351                           ;lin_slave.c: 184: } else {
  3352  0168  0008               	return
  3353  0169                     l2215:	
  3354                           
  3355                           ;lin_slave.c: 185: LIN_rxState = LIN_RX_WAIT;
  3356  0169  3009               	movlw	9
  3357  016A  0021               	movlb	1	; select bank1
  3358  016B  00A8               	movwf	??_LIN_handler^(0+128)
  3359  016C  0828               	movf	??_LIN_handler^(0+128),w
  3360  016D  0020               	movlb	0	; select bank0
  3361  016E  00BD               	movwf	LIN_handler@LIN_rxState
  3362                           
  3363                           ;lin_slave.c: 188: }
  3364                           
  3365                           ;lin_slave.c: 186: }
  3366                           ;lin_slave.c: 187: break;
  3367  016F  0008               	return
  3368  0170                     l2219:	
  3369  0170  083D               	movf	LIN_handler@LIN_rxState,w
  3370                           
  3371                           ; Switch size 1, requested type "space"
  3372                           ; Number of cases is 10, Range of values is 0 to 9
  3373                           ; switch strategies available:
  3374                           ; Name         Instructions Cycles
  3375                           ; direct_byte           26     6 (fixed)
  3376                           ; simple_byte           31    16 (average)
  3377                           ; jumptable            260     6 (fixed)
  3378                           ;	Chosen strategy is direct_byte
  3379  0171  0084               	movwf	4
  3380  0172  300A               	movlw	10
  3381  0173  0204               	subwf	4,w
  3382  0174  1803               	skipnc
  3383  0175  0008               	return
  3384  0176  3184               	movlp	high S2255
  3385  0177  3504               	lslf	4,w
  3386  0178  3EA8               	addlw	low S2255
  3387  0179  0082               	movwf	2
  3388                           
  3389                           ;lin_slave.c: 189: return LIN_rxState;
  3390                           ;	Return value of _LIN_handler is never used
  3391  017A  0008               	return
  3392  017B                     __end_of_LIN_handler:	
  3393                           
  3394                           	psect	swtext1
  3395  04A8                     __pswtext1:	
  3396  04A8                     S2255:	
  3397  04A8  3180  2857         	ljmp	l2133
  3398  04AA  3180  2866         	ljmp	l2141
  3399  04AC  3180  2880         	ljmp	l2149
  3400  04AE  3180  289A         	ljmp	l2157
  3401  04B0  3180  28E3         	ljmp	l2177
  3402  04B2  3181  2917         	ljmp	l2187
  3403  04B4  3181  2941         	ljmp	l2195
  3404  04B6  3181  294B         	ljmp	l2199
  3405  04B8  3181  2950         	ljmp	l2201
  3406  04BA  3181  2961         	ljmp	l2209
  3407                           
  3408                           	psect	text17
  3409  0377                     __ptext17:	
  3410 ;; *************** function _processLIN *****************
  3411 ;; Defined at:
  3412 ;;		line 51 in file "mcc_generated_files/LINDrivers/lin_app.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  tempRxData      8    3[BANK0 ] unsigned char [8]
  3417 ;;  cmd             1   11[BANK0 ] unsigned char 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  1    wreg      void 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3430 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3431 ;;Total ram usage:       10 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    6
  3434 ;; This function calls:
  3435 ;;		_LIN_getPacket
  3436 ;; This function is called by:
  3437 ;;		_LIN_Slave_Initialize
  3438 ;;		_main
  3439 ;;		_LIN_handler
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _processLIN
  3445  0377                     _processLIN:	
  3446                           
  3447                           ;lin_app.c: 52: uint8_t tempRxData[8];
  3448                           ;lin_app.c: 53: uint8_t cmd;
  3449                           ;lin_app.c: 55: cmd = LIN_getPacket(tempRxData);
  3450                           
  3451                           ;incstack = 0
  3452                           ; Regs used in _processLIN: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3453  0377  3065               	movlw	(low (processLIN@tempRxData| 0))& (0+255)
  3454  0378  3183  23DF  3183   	fcall	_LIN_getPacket
  3455  037B  0020               	movlb	0	; select bank0
  3456  037C  00E4               	movwf	??_processLIN
  3457  037D  0864               	movf	??_processLIN,w
  3458  037E  00ED               	movwf	processLIN@cmd
  3459                           
  3460                           ;lin_app.c: 56: switch(cmd){
  3461  037F  2B8A               	goto	l2123
  3462  0380                     l2117:	
  3463                           ;lin_app.c: 63: case led:
  3464                           
  3465                           ;lin_app.c: 62: break;
  3466                           
  3467                           ;lin_app.c: 61: case LFRX:
  3468                           
  3469                           ;lin_app.c: 60: break;
  3470                           
  3471                           ;lin_app.c: 59: case RSSI:
  3472                           
  3473                           ;lin_app.c: 58: break;
  3474                           
  3475                           ;lin_app.c: 57: case UNLOCK:
  3476                           
  3477                           
  3478                           ;lin_app.c: 64: if(led_Data[0] == 0x34)
  3479  0380  3034               	movlw	52
  3480  0381  064E               	xorwf	_led_Data,w
  3481  0382  1D03               	btfss	3,2
  3482  0383  2B87               	goto	l310
  3483                           
  3484                           ;lin_app.c: 65: LATCbits.LATC0 = 1;
  3485  0384  0022               	movlb	2	; select bank2
  3486  0385  140E               	bsf	14,0	;volatile
  3487  0386  0008               	return
  3488  0387                     l310:	
  3489                           
  3490                           ;lin_app.c: 66: else
  3491                           ;lin_app.c: 67: LATCbits.LATC0 = 0;
  3492  0387  0022               	movlb	2	; select bank2
  3493  0388  100E               	bcf	14,0	;volatile
  3494                           
  3495                           ;lin_app.c: 71: }
  3496                           
  3497                           ;lin_app.c: 70: break;
  3498                           
  3499                           ;lin_app.c: 69: default:
  3500                           
  3501                           ;lin_app.c: 68: break;
  3502  0389  0008               	return
  3503  038A                     l2123:	
  3504  038A  0020               	movlb	0	; select bank0
  3505  038B  086D               	movf	processLIN@cmd,w
  3506                           
  3507                           ; Switch size 1, requested type "space"
  3508                           ; Number of cases is 4, Range of values is 0 to 3
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte           13     7 (average)
  3512                           ; direct_byte           14     6 (fixed)
  3513                           ; jumptable            260     6 (fixed)
  3514                           ;	Chosen strategy is simple_byte
  3515  038C  3A00               	xorlw	0	; case 0
  3516  038D  1903               	skipnz
  3517  038E  2B99               	goto	l313
  3518  038F  3A01               	xorlw	1	; case 1
  3519  0390  1903               	skipnz
  3520  0391  2B99               	goto	l313
  3521  0392  3A03               	xorlw	3	; case 2
  3522  0393  1903               	skipnz
  3523  0394  2B99               	goto	l313
  3524  0395  3A01               	xorlw	1	; case 3
  3525  0396  1903               	skipnz
  3526  0397  2B80               	goto	l2117
  3527  0398  2B99               	goto	l313
  3528  0399                     l313:	
  3529  0399  0008               	return
  3530  039A                     __end_of_processLIN:	
  3531                           
  3532                           	psect	text18
  3533  03DF                     __ptext18:	
  3534 ;; *************** function _LIN_getPacket *****************
  3535 ;; Defined at:
  3536 ;;		line 202 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;  data            1    wreg     PTR unsigned char 
  3539 ;;		 -> processLIN@tempRxData(8), 
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;  data            1    0[BANK0 ] PTR unsigned char 
  3542 ;;		 -> processLIN@tempRxData(8), 
  3543 ;;  cmd             1    1[BANK0 ] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      unsigned char 
  3546 ;; Registers used:
  3547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3555 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3556 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3557 ;;Total ram usage:        3 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    5
  3560 ;; This function calls:
  3561 ;;		_memset
  3562 ;; This function is called by:
  3563 ;;		_processLIN
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function _LIN_getPacket
  3569  03DF                     _LIN_getPacket:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in _LIN_getPacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3573                           ;LIN_getPacket@data stored from wreg
  3574  03DF  0020               	movlb	0	; select bank0
  3575  03E0  00E2               	movwf	LIN_getPacket@data
  3576                           
  3577                           ;lin_slave.c: 203: uint8_t cmd = LIN_packet.PID & 0x3F;
  3578  03E1  0841               	movf	_LIN_packet,w
  3579  03E2  393F               	andlw	63
  3580  03E3  00F9               	movwf	??_LIN_getPacket
  3581  03E4  0879               	movf	??_LIN_getPacket,w
  3582  03E5  00E3               	movwf	LIN_getPacket@cmd
  3583                           
  3584                           ;lin_slave.c: 205: __builtin_memcpy(data,LIN_packet.data,sizeof(LIN_packet.data));
  3585  03E6  0862               	movf	LIN_getPacket@data,w
  3586  03E7  0086               	movwf	6
  3587  03E8  0187               	clrf	7
  3588  03E9  3001               	movlw	1
  3589  03EA  3E41               	addlw	(low (_LIN_packet| 0))& (0+255)
  3590  03EB  0084               	movwf	4
  3591  03EC  0185               	clrf	5
  3592  03ED  3008               	movlw	8
  3593  03EE  00F9               	movwf	??_LIN_getPacket
  3594  03EF                     u162m0:	
  3595  03EF  0012               	moviw fsr0++
  3596  03F0  001E               	movwi fsr1++
  3597  03F1  0BF9               	decfsz	??_LIN_getPacket,f
  3598  03F2  2BEF               	goto	u162m0
  3599                           
  3600                           ;lin_slave.c: 206: memset(LIN_packet.rawPacket, 0, sizeof(LIN_packet.rawPacket));
  3601  03F3  3000               	movlw	0
  3602  03F4  00F2               	movwf	memset@c
  3603  03F5  00F3               	movwf	memset@c+1
  3604  03F6  300D               	movlw	13
  3605  03F7  00F4               	movwf	memset@n
  3606  03F8  3000               	movlw	0
  3607  03F9  00F5               	movwf	memset@n+1
  3608  03FA  3041               	movlw	(low (_LIN_packet| 0))& (0+255)
  3609  03FB  3184  241D         	fcall	_memset
  3610                           
  3611                           ;lin_slave.c: 208: return cmd;
  3612  03FD  0020               	movlb	0	; select bank0
  3613  03FE  0863               	movf	LIN_getPacket@cmd,w
  3614  03FF  0008               	return
  3615  0400                     __end_of_LIN_getPacket:	
  3616                           
  3617                           	psect	text19
  3618  041D                     __ptext19:	
  3619 ;; *************** function _memset *****************
  3620 ;; Defined at:
  3621 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\memset.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;  p1              1    wreg     PTR void 
  3624 ;;		 -> LIN_packet(13), 
  3625 ;;  c               2    2[COMMON] int 
  3626 ;;  n               2    4[COMMON] unsigned int 
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  p1              1    8[COMMON] PTR void 
  3629 ;;		 -> LIN_packet(13), 
  3630 ;;  p               1    7[COMMON] PTR unsigned char 
  3631 ;;		 -> LIN_packet(13), 
  3632 ;; Return value:  Size  Location     Type
  3633 ;;                  1    wreg      PTR void 
  3634 ;; Registers used:
  3635 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3643 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3644 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3645 ;;Total ram usage:        7 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; Hardware stack levels required when called:    4
  3648 ;; This function calls:
  3649 ;;		Nothing
  3650 ;; This function is called by:
  3651 ;;		_LIN_handler
  3652 ;;		_LIN_getPacket
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           
  3657                           ;psect for function _memset
  3658  041D                     _memset:	
  3659                           
  3660                           ;incstack = 0
  3661                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  3662                           ;memset@p1 stored from wreg
  3663  041D  00F8               	movwf	memset@p1
  3664  041E  0878               	movf	memset@p1,w
  3665  041F  00F6               	movwf	??_memset
  3666  0420  0876               	movf	??_memset,w
  3667  0421  00F7               	movwf	memset@p
  3668  0422                     l2049:	
  3669  0422  3001               	movlw	1
  3670  0423  02F4               	subwf	memset@n,f
  3671  0424  3000               	movlw	0
  3672  0425  3BF5               	subwfb	memset@n+1,f
  3673  0426  0A74               	incf	memset@n,w
  3674  0427  1903               	btfsc	3,2
  3675  0428  0A75               	incf	memset@n+1,w
  3676  0429  1903               	btfsc	3,2
  3677  042A  0008               	return
  3678  042B  0872               	movf	memset@c,w
  3679  042C  00F6               	movwf	??_memset
  3680  042D  0877               	movf	memset@p,w
  3681  042E  0086               	movwf	6
  3682  042F  0187               	clrf	7
  3683  0430  0876               	movf	??_memset,w
  3684  0431  0081               	movwf	1
  3685  0432  3001               	movlw	1
  3686  0433  00F6               	movwf	??_memset
  3687  0434  0876               	movf	??_memset,w
  3688  0435  07F7               	addwf	memset@p,f
  3689  0436  2C22               	goto	l2049
  3690  0437                     __end_of_memset:	
  3691                           ;	Return value of _memset is never used
  3692                           
  3693                           
  3694                           	psect	text20
  3695  056A                     __ptext20:	
  3696 ;; *************** function _LIN_stopTimer *****************
  3697 ;; Defined at:
  3698 ;;		line 304 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;		None
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  1    wreg      void 
  3705 ;; Registers used:
  3706 ;;		status,2
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3716 ;;Total ram usage:        0 bytes
  3717 ;; Hardware stack levels used:    1
  3718 ;; Hardware stack levels required when called:    4
  3719 ;; This function calls:
  3720 ;;		Nothing
  3721 ;; This function is called by:
  3722 ;;		_LIN_init
  3723 ;;		_LIN_handler
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           
  3728                           ;psect for function _LIN_stopTimer
  3729  056A                     _LIN_stopTimer:	
  3730                           
  3731                           ;lin_slave.c: 305: __nop();
  3732                           
  3733                           ;incstack = 0
  3734                           ; Regs used in _LIN_stopTimer: [status,2]
  3735  056A  0000               	nop
  3736                           
  3737                           ;lin_slave.c: 307: CountCallBack = 0;
  3738  056B  0020               	movlb	0	; select bank0
  3739  056C  01BE               	clrf	_CountCallBack	;volatile
  3740                           
  3741                           ;lin_slave.c: 308: LIN_timerRunning = 0;
  3742  056D  01BF               	clrf	_LIN_timerRunning
  3743  056E  0008               	return
  3744  056F                     __end_of_LIN_stopTimer:	
  3745                           
  3746                           	psect	text21
  3747  04FE                     __ptext21:	
  3748 ;; *************** function _LIN_startTimer *****************
  3749 ;; Defined at:
  3750 ;;		line 283 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  timeout         1    wreg     unsigned char 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;  timeout         1    4[COMMON] unsigned char 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, pclath, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3767 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3768 ;;Total ram usage:        2 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    5
  3771 ;; This function calls:
  3772 ;;		_TMR0_WriteTimer
  3773 ;; This function is called by:
  3774 ;;		_LIN_handler
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           
  3779                           ;psect for function _LIN_startTimer
  3780  04FE                     _LIN_startTimer:	
  3781                           
  3782                           ;incstack = 0
  3783                           ; Regs used in _LIN_startTimer: [wreg+status,2+status,0+pclath+cstack]
  3784                           ;LIN_startTimer@timeout stored from wreg
  3785  04FE  00F4               	movwf	LIN_startTimer@timeout
  3786                           
  3787                           ;lin_slave.c: 284: LIN_timeout = timeout;
  3788  04FF  0874               	movf	LIN_startTimer@timeout,w
  3789  0500  00F3               	movwf	??_LIN_startTimer
  3790  0501  0873               	movf	??_LIN_startTimer,w
  3791  0502  0020               	movlb	0	; select bank0
  3792  0503  00EE               	movwf	_LIN_timeout
  3793                           
  3794                           ;lin_slave.c: 285: TMR0_WriteTimer(0);
  3795  0504  3000               	movlw	0
  3796  0505  3185  256F         	fcall	_TMR0_WriteTimer
  3797                           
  3798                           ;lin_slave.c: 286: __nop();
  3799  0507  0000               	nop
  3800                           
  3801                           ;lin_slave.c: 287: LIN_timerRunning = 1;
  3802  0508  0020               	movlb	0	; select bank0
  3803  0509  01BF               	clrf	_LIN_timerRunning
  3804  050A  0ABF               	incf	_LIN_timerRunning,f
  3805  050B  0008               	return
  3806  050C                     __end_of_LIN_startTimer:	
  3807                           
  3808                           	psect	text22
  3809  056F                     __ptext22:	
  3810 ;; *************** function _TMR0_WriteTimer *****************
  3811 ;; Defined at:
  3812 ;;		line 96 in file "mcc_generated_files/tmr0.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  timerVal        1    wreg     unsigned char 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  timerVal        1    2[COMMON] unsigned char 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;Total ram usage:        1 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    4
  3833 ;; This function calls:
  3834 ;;		Nothing
  3835 ;; This function is called by:
  3836 ;;		_LIN_startTimer
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           
  3841                           ;psect for function _TMR0_WriteTimer
  3842  056F                     _TMR0_WriteTimer:	
  3843                           
  3844                           ;incstack = 0
  3845                           ; Regs used in _TMR0_WriteTimer: [wreg]
  3846                           ;TMR0_WriteTimer@timerVal stored from wreg
  3847  056F  00F2               	movwf	TMR0_WriteTimer@timerVal
  3848                           
  3849                           ;tmr0.c: 99: TMR0 = timerVal;
  3850  0570  0872               	movf	TMR0_WriteTimer@timerVal,w
  3851  0571  0020               	movlb	0	; select bank0
  3852  0572  0095               	movwf	21	;volatile
  3853  0573  0008               	return
  3854  0574                     __end_of_TMR0_WriteTimer:	
  3855                           
  3856                           	psect	text23
  3857  01F0                     __ptext23:	
  3858 ;; *************** function _LIN_queuePacket *****************
  3859 ;; Defined at:
  3860 ;;		line 66 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;  cmd             1    wreg     unsigned char 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  cmd             1    5[BANK0 ] unsigned char 
  3865 ;;  i               1    6[BANK0 ] unsigned char 
  3866 ;;  tempSchedule    2    7[BANK0 ] PTR const struct .
  3867 ;;		 -> ROM(8192), scheduleTable(16), 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3878 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3879 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3880 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;Total ram usage:        7 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    6
  3884 ;; This function calls:
  3885 ;;		_LIN_getChecksum
  3886 ;;		_LIN_sendPacket
  3887 ;; This function is called by:
  3888 ;;		_LIN_handler
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _LIN_queuePacket
  3894  01F0                     _LIN_queuePacket:	
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _LIN_queuePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3898                           ;LIN_queuePacket@cmd stored from wreg
  3899  01F0  0020               	movlb	0	; select bank0
  3900  01F1  00E7               	movwf	LIN_queuePacket@cmd
  3901                           
  3902                           ;lin_slave.c: 67: const lin_rx_cmd_t* tempSchedule = LIN_rxCommand;
  3903  01F2  0858               	movf	_LIN_rxCommand+1,w
  3904  01F3  00EA               	movwf	LIN_queuePacket@tempSchedule+1
  3905  01F4  0857               	movf	_LIN_rxCommand,w
  3906  01F5  00E9               	movwf	LIN_queuePacket@tempSchedule
  3907                           
  3908                           ;lin_slave.c: 69: cmd &= 0x3F;
  3909  01F6  303F               	movlw	63
  3910  01F7  00E4               	movwf	??_LIN_queuePacket
  3911  01F8  0864               	movf	??_LIN_queuePacket,w
  3912  01F9  05E7               	andwf	LIN_queuePacket@cmd,f
  3913                           
  3914                           ;lin_slave.c: 70: for(uint8_t i = 0; i < LIN_rxCommandLength; i++){
  3915  01FA  01E8               	clrf	LIN_queuePacket@i
  3916  01FB                     l2105:	
  3917  01FB  0861               	movf	_LIN_rxCommandLength,w
  3918  01FC  0268               	subwf	LIN_queuePacket@i,w
  3919  01FD  1803               	btfsc	3,0
  3920  01FE  2A10               	goto	l2107
  3921                           
  3922                           ;lin_slave.c: 71: if(cmd == tempSchedule->cmd){
  3923  01FF  0869               	movf	LIN_queuePacket@tempSchedule,w
  3924  0200  0084               	movwf	4
  3925  0201  086A               	movf	LIN_queuePacket@tempSchedule+1,w
  3926  0202  0085               	movwf	5
  3927  0203  0800               	movf	0,w	;code access
  3928  0204  0667               	xorwf	LIN_queuePacket@cmd,w
  3929  0205  1903               	btfsc	3,2
  3930  0206  2A10               	goto	l2107
  3931                           
  3932                           ;lin_slave.c: 73: }
  3933                           ;lin_slave.c: 74: tempSchedule++;
  3934                           
  3935                           ;lin_slave.c: 72: break;
  3936  0207  3004               	movlw	4
  3937  0208  07E9               	addwf	LIN_queuePacket@tempSchedule,f
  3938  0209  3000               	movlw	0
  3939  020A  3DEA               	addwfc	LIN_queuePacket@tempSchedule+1,f
  3940  020B  3001               	movlw	1
  3941  020C  00E4               	movwf	??_LIN_queuePacket
  3942  020D  0864               	movf	??_LIN_queuePacket,w
  3943  020E  07E8               	addwf	LIN_queuePacket@i,f
  3944  020F  29FB               	goto	l2105
  3945  0210                     l2107:	
  3946                           
  3947                           ;lin_slave.c: 75: }
  3948                           ;lin_slave.c: 77: LIN_packet.type = tempSchedule->type;
  3949  0210  086A               	movf	LIN_queuePacket@tempSchedule+1,w
  3950  0211  00E5               	movwf	??_LIN_queuePacket+1
  3951  0212  0869               	movf	LIN_queuePacket@tempSchedule,w
  3952  0213  00E4               	movwf	??_LIN_queuePacket
  3953  0214  3001               	movlw	1
  3954  0215  0764               	addwf	??_LIN_queuePacket,w
  3955  0216  0084               	movwf	4
  3956  0217  0865               	movf	??_LIN_queuePacket+1,w
  3957  0218  1803               	skipnc
  3958  0219  0A65               	incf	??_LIN_queuePacket+1,w
  3959  021A  0085               	movwf	5
  3960  021B  0800               	movf	0,w	;code access
  3961  021C  00E6               	movwf	??_LIN_queuePacket+2
  3962  021D  0866               	movf	??_LIN_queuePacket+2,w
  3963  021E  00CB               	movwf	_LIN_packet+10
  3964                           
  3965                           ;lin_slave.c: 78: LIN_packet.length = tempSchedule->length;
  3966  021F  086A               	movf	LIN_queuePacket@tempSchedule+1,w
  3967  0220  00E5               	movwf	??_LIN_queuePacket+1
  3968  0221  0869               	movf	LIN_queuePacket@tempSchedule,w
  3969  0222  00E4               	movwf	??_LIN_queuePacket
  3970  0223  3002               	movlw	2
  3971  0224  0764               	addwf	??_LIN_queuePacket,w
  3972  0225  0084               	movwf	4
  3973  0226  0865               	movf	??_LIN_queuePacket+1,w
  3974  0227  1803               	skipnc
  3975  0228  0A65               	incf	??_LIN_queuePacket+1,w
  3976  0229  0085               	movwf	5
  3977  022A  0800               	movf	0,w	;code access
  3978  022B  00E6               	movwf	??_LIN_queuePacket+2
  3979  022C  0866               	movf	??_LIN_queuePacket+2,w
  3980  022D  00CC               	movwf	_LIN_packet+11
  3981                           
  3982                           ;lin_slave.c: 82: __builtin_memcpy(LIN_packet.data,tempSchedule->data,LIN_packet.length)
      +                          ;
  3983  022E  3001               	movlw	1
  3984  022F  3E41               	addlw	(low (_LIN_packet| 0))& (0+255)
  3985  0230  0086               	movwf	6
  3986  0231  0187               	clrf	7
  3987  0232  0020               	movlb	0	; select bank0
  3988  0233  086A               	movf	LIN_queuePacket@tempSchedule+1,w
  3989  0234  00E5               	movwf	??_LIN_queuePacket+1
  3990  0235  0869               	movf	LIN_queuePacket@tempSchedule,w
  3991  0236  00E4               	movwf	??_LIN_queuePacket
  3992  0237  3003               	movlw	3
  3993  0238  0764               	addwf	??_LIN_queuePacket,w
  3994  0239  0084               	movwf	4
  3995  023A  0865               	movf	??_LIN_queuePacket+1,w
  3996  023B  1803               	skipnc
  3997  023C  0A65               	incf	??_LIN_queuePacket+1,w
  3998  023D  0085               	movwf	5
  3999  023E  3F00               	moviw [0]fsr0
  4000  023F  0084               	movwf	4
  4001  0240  0185               	clrf	5
  4002  0241  084C               	movf	_LIN_packet+11,w
  4003  0242  00E6               	movwf	??_LIN_queuePacket+2
  4004  0243                     u165m0:	
  4005  0243  0012               	moviw fsr0++
  4006  0244  001E               	movwi fsr1++
  4007  0245  0BE6               	decfsz	??_LIN_queuePacket+2,f
  4008  0246  2A43               	goto	u165m0
  4009                           
  4010                           ;lin_slave.c: 85: LIN_packet.checksum = LIN_getChecksum(LIN_packet.length, LIN_packet.da
      +                          ta);
  4011  0247  3042               	movlw	(low ((_LIN_packet| 0+1)))& (0+255)
  4012  0248  0020               	movlb	0	; select bank0
  4013  0249  00E4               	movwf	??_LIN_queuePacket
  4014  024A  0864               	movf	??_LIN_queuePacket,w
  4015  024B  00F2               	movwf	LIN_getChecksum@data
  4016  024C  084C               	movf	_LIN_packet+11,w
  4017  024D  3183  2327  3181   	fcall	_LIN_getChecksum
  4018  0250  0020               	movlb	0	; select bank0
  4019  0251  00E5               	movwf	??_LIN_queuePacket+1
  4020  0252  0865               	movf	??_LIN_queuePacket+1,w
  4021  0253  00CA               	movwf	_LIN_packet+9
  4022                           
  4023                           ;lin_slave.c: 86: LIN_sendPacket(LIN_packet.length, LIN_packet.data);
  4024  0254  3042               	movlw	(low ((_LIN_packet| 0+1)))& (0+255)
  4025  0255  00E4               	movwf	??_LIN_queuePacket
  4026  0256  0864               	movf	??_LIN_queuePacket,w
  4027  0257  00F8               	movwf	LIN_sendPacket@data
  4028  0258  084C               	movf	_LIN_packet+11,w
  4029  0259  3183  23BD         	fcall	_LIN_sendPacket
  4030  025B  0008               	return
  4031  025C                     __end_of_LIN_queuePacket:	
  4032                           
  4033                           	psect	text24
  4034  03BD                     __ptext24:	
  4035 ;; *************** function _LIN_sendPacket *****************
  4036 ;; Defined at:
  4037 ;;		line 192 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  length          1    wreg     unsigned char 
  4040 ;;  data            1    8[COMMON] PTR unsigned char 
  4041 ;;		 -> LIN_packet(13), 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  length          1    0[BANK0 ] unsigned char 
  4044 ;;  i               1    1[BANK0 ] unsigned char 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4054 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4058 ;;Total ram usage:        4 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    5
  4061 ;; This function calls:
  4062 ;;		_EUSART_Write
  4063 ;;		_LIN_getChecksum
  4064 ;; This function is called by:
  4065 ;;		_LIN_queuePacket
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           
  4070                           ;psect for function _LIN_sendPacket
  4071  03BD                     _LIN_sendPacket:	
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _LIN_sendPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4075                           ;LIN_sendPacket@length stored from wreg
  4076  03BD  0020               	movlb	0	; select bank0
  4077  03BE  00E2               	movwf	LIN_sendPacket@length
  4078                           
  4079                           ;lin_slave.c: 195: for(uint8_t i = 0; i < length; i++){
  4080  03BF  01E3               	clrf	LIN_sendPacket@i
  4081  03C0                     l2075:	
  4082  03C0  0862               	movf	LIN_sendPacket@length,w
  4083  03C1  0263               	subwf	LIN_sendPacket@i,w
  4084  03C2  1803               	btfsc	3,0
  4085  03C3  2BD4               	goto	l2077
  4086                           
  4087                           ;lin_slave.c: 196: EUSART_Write(*(data + i));
  4088  03C4  0863               	movf	LIN_sendPacket@i,w
  4089  03C5  0778               	addwf	LIN_sendPacket@data,w
  4090  03C6  00F9               	movwf	??_LIN_sendPacket
  4091  03C7  0879               	movf	??_LIN_sendPacket,w
  4092  03C8  0086               	movwf	6
  4093  03C9  0187               	clrf	7
  4094  03CA  0801               	movf	1,w
  4095  03CB  3183  239A  3183   	fcall	_EUSART_Write
  4096  03CE  3001               	movlw	1
  4097  03CF  00F9               	movwf	??_LIN_sendPacket
  4098  03D0  0879               	movf	??_LIN_sendPacket,w
  4099  03D1  0020               	movlb	0	; select bank0
  4100  03D2  07E3               	addwf	LIN_sendPacket@i,f
  4101  03D3  2BC0               	goto	l2075
  4102  03D4                     l2077:	
  4103                           
  4104                           ;lin_slave.c: 197: }
  4105                           ;lin_slave.c: 199: EUSART_Write(LIN_getChecksum(length, data));
  4106  03D4  0878               	movf	LIN_sendPacket@data,w
  4107  03D5  00F9               	movwf	??_LIN_sendPacket
  4108  03D6  0879               	movf	??_LIN_sendPacket,w
  4109  03D7  00F2               	movwf	LIN_getChecksum@data
  4110  03D8  0862               	movf	LIN_sendPacket@length,w
  4111  03D9  3183  2327  3183   	fcall	_LIN_getChecksum
  4112  03DC  3183  239A         	fcall	_EUSART_Write
  4113  03DE  0008               	return
  4114  03DF                     __end_of_LIN_sendPacket:	
  4115                           
  4116                           	psect	text25
  4117  0327                     __ptext25:	
  4118 ;; *************** function _LIN_getChecksum *****************
  4119 ;; Defined at:
  4120 ;;		line 270 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  length          1    wreg     unsigned char 
  4123 ;;  data            1    2[COMMON] PTR unsigned char 
  4124 ;;		 -> LIN_packet(13), 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  length          1    4[COMMON] unsigned char 
  4127 ;;  i               1    5[COMMON] unsigned char 
  4128 ;;  checksum        2    6[COMMON] unsigned int 
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  1    wreg      unsigned char 
  4131 ;; Registers used:
  4132 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4133 ;; Tracked objects:
  4134 ;;		On entry : 0/0
  4135 ;;		On exit  : 0/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4138 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4141 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;Total ram usage:        6 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    4
  4145 ;; This function calls:
  4146 ;;		Nothing
  4147 ;; This function is called by:
  4148 ;;		_LIN_queuePacket
  4149 ;;		_LIN_handler
  4150 ;;		_LIN_sendPacket
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function _LIN_getChecksum
  4156  0327                     _LIN_getChecksum:	
  4157                           
  4158                           ;incstack = 0
  4159                           ; Regs used in _LIN_getChecksum: [wreg+fsr1l+fsr1h+status,2+status,0]
  4160                           ;LIN_getChecksum@length stored from wreg
  4161  0327  00F4               	movwf	LIN_getChecksum@length
  4162                           
  4163                           ;lin_slave.c: 271: uint16_t checksum = 0;
  4164  0328  01F6               	clrf	LIN_getChecksum@checksum
  4165  0329  01F7               	clrf	LIN_getChecksum@checksum+1
  4166                           
  4167                           ;lin_slave.c: 273: for (uint8_t i = 0; i < length; i++){
  4168  032A  01F5               	clrf	LIN_getChecksum@i
  4169  032B                     l2037:	
  4170  032B  0874               	movf	LIN_getChecksum@length,w
  4171  032C  0275               	subwf	LIN_getChecksum@i,w
  4172  032D  1803               	btfsc	3,0
  4173  032E  2B4D               	goto	l256
  4174                           
  4175                           ;lin_slave.c: 274: checksum = checksum + *data++;
  4176  032F  0872               	movf	LIN_getChecksum@data,w
  4177  0330  0086               	movwf	6
  4178  0331  0187               	clrf	7
  4179  0332  0801               	movf	1,w
  4180  0333  0776               	addwf	LIN_getChecksum@checksum,w
  4181  0334  00F6               	movwf	LIN_getChecksum@checksum
  4182  0335  0877               	movf	LIN_getChecksum@checksum+1,w
  4183  0336  1803               	skipnc
  4184  0337  0A77               	incf	LIN_getChecksum@checksum+1,w
  4185  0338  00F7               	movwf	LIN_getChecksum@checksum+1
  4186  0339  3001               	movlw	1
  4187  033A  00F3               	movwf	??_LIN_getChecksum
  4188  033B  0873               	movf	??_LIN_getChecksum,w
  4189  033C  07F2               	addwf	LIN_getChecksum@data,f
  4190                           
  4191                           ;lin_slave.c: 275: if(checksum > 0xFF)
  4192  033D  3001               	movlw	1
  4193  033E  0277               	subwf	LIN_getChecksum@checksum+1,w
  4194  033F  3000               	movlw	0
  4195  0340  1903               	skipnz
  4196  0341  0276               	subwf	LIN_getChecksum@checksum,w
  4197  0342  1C03               	skipc
  4198  0343  2B48               	goto	l2035
  4199                           
  4200                           ;lin_slave.c: 276: checksum -= 0xFF;
  4201  0344  30FF               	movlw	255
  4202  0345  02F6               	subwf	LIN_getChecksum@checksum,f
  4203  0346  3000               	movlw	0
  4204  0347  3BF7               	subwfb	LIN_getChecksum@checksum+1,f
  4205  0348                     l2035:	
  4206  0348  3001               	movlw	1
  4207  0349  00F3               	movwf	??_LIN_getChecksum
  4208  034A  0873               	movf	??_LIN_getChecksum,w
  4209  034B  07F5               	addwf	LIN_getChecksum@i,f
  4210  034C  2B2B               	goto	l2037
  4211  034D                     l256:	
  4212                           
  4213                           ;lin_slave.c: 277: }
  4214                           ;lin_slave.c: 278: checksum = ~checksum;
  4215  034D  09F6               	comf	LIN_getChecksum@checksum,f
  4216  034E  09F7               	comf	LIN_getChecksum@checksum+1,f
  4217                           
  4218                           ;lin_slave.c: 280: return (uint8_t)checksum;
  4219  034F  0876               	movf	LIN_getChecksum@checksum,w
  4220  0350  0008               	return
  4221  0351                     __end_of_LIN_getChecksum:	
  4222                           
  4223                           	psect	text26
  4224  039A                     __ptext26:	
  4225 ;; *************** function _EUSART_Write *****************
  4226 ;; Defined at:
  4227 ;;		line 170 in file "mcc_generated_files/eusart.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;  txData          1    wreg     unsigned char 
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  txData          1    3[COMMON] unsigned char 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;Total ram usage:        2 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    4
  4248 ;; This function calls:
  4249 ;;		Nothing
  4250 ;; This function is called by:
  4251 ;;		_LIN_sendPacket
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function _EUSART_Write
  4257  039A                     _EUSART_Write:	
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4261                           ;EUSART_Write@txData stored from wreg
  4262  039A  00F3               	movwf	EUSART_Write@txData
  4263  039B                     l2053:	
  4264                           ;eusart.c: 173: {
  4265                           
  4266                           ;eusart.c: 172: while(0 == eusartTxBufferRemaining)
  4267                           
  4268  039B  0020               	movlb	0	; select bank0
  4269  039C  085F               	movf	_eusartTxBufferRemaining,w	;volatile
  4270  039D  1903               	btfsc	3,2
  4271  039E  2B9B               	goto	l2053
  4272                           
  4273                           ;eusart.c: 174: }
  4274                           ;eusart.c: 176: if(0 == PIE1bits.TXIE)
  4275  039F  0021               	movlb	1	; select bank1
  4276  03A0  1A11               	btfsc	17,4	;volatile
  4277  03A1  2BA6               	goto	l449
  4278                           
  4279                           ;eusart.c: 177: {
  4280                           ;eusart.c: 178: TXREG = txData;
  4281  03A2  0873               	movf	EUSART_Write@txData,w
  4282  03A3  0023               	movlb	3	; select bank3
  4283  03A4  009A               	movwf	26	;volatile
  4284                           
  4285                           ;eusart.c: 179: }
  4286  03A5  2BBA               	goto	l2067
  4287  03A6                     l449:	
  4288                           
  4289                           ;eusart.c: 180: else
  4290                           ;eusart.c: 181: {
  4291                           ;eusart.c: 182: PIE1bits.TXIE = 0;
  4292  03A6  1211               	bcf	17,4	;volatile
  4293                           
  4294                           ;eusart.c: 183: eusartTxBuffer[eusartTxHead++] = txData;
  4295  03A7  0873               	movf	EUSART_Write@txData,w
  4296  03A8  00F2               	movwf	??_EUSART_Write
  4297  03A9  0020               	movlb	0	; select bank0
  4298  03AA  083B               	movf	_eusartTxHead,w
  4299  03AB  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4300  03AC  0086               	movwf	6
  4301  03AD  0187               	clrf	7
  4302  03AE  0872               	movf	??_EUSART_Write,w
  4303  03AF  0081               	movwf	1
  4304  03B0  3001               	movlw	1
  4305  03B1  00F2               	movwf	??_EUSART_Write
  4306  03B2  0872               	movf	??_EUSART_Write,w
  4307  03B3  07BB               	addwf	_eusartTxHead,f	;volatile
  4308                           
  4309                           ;eusart.c: 184: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4310  03B4  3008               	movlw	8
  4311  03B5  023B               	subwf	_eusartTxHead,w	;volatile
  4312  03B6  1803               	btfsc	3,0
  4313                           
  4314                           ;eusart.c: 185: {
  4315                           ;eusart.c: 186: eusartTxHead = 0;
  4316  03B7  01BB               	clrf	_eusartTxHead	;volatile
  4317                           
  4318                           ;eusart.c: 187: }
  4319                           ;eusart.c: 188: eusartTxBufferRemaining--;
  4320  03B8  3001               	movlw	1
  4321  03B9  02DF               	subwf	_eusartTxBufferRemaining,f	;volatile
  4322  03BA                     l2067:	
  4323                           
  4324                           ;eusart.c: 189: }
  4325                           ;eusart.c: 190: PIE1bits.TXIE = 1;
  4326  03BA  0021               	movlb	1	; select bank1
  4327  03BB  1611               	bsf	17,4	;volatile
  4328  03BC  0008               	return
  4329  03BD                     __end_of_EUSART_Write:	
  4330                           
  4331                           	psect	text27
  4332  0574                     __ptext27:	
  4333 ;; *************** function _LIN_enableRx *****************
  4334 ;; Defined at:
  4335 ;;		line 311 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		None
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;Total ram usage:        0 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    4
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_LIN_init
  4360 ;;		_LIN_handler
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _LIN_enableRx
  4366  0574                     _LIN_enableRx:	
  4367                           
  4368                           ;lin_slave.c: 312: RCSTAbits.CREN = 1;
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _LIN_enableRx: []
  4372  0574  0023               	movlb	3	; select bank3
  4373  0575  161D               	bsf	29,4	;volatile
  4374                           
  4375                           ;lin_slave.c: 313: PIE1bits.RCIE = 1;
  4376  0576  0021               	movlb	1	; select bank1
  4377  0577  1691               	bsf	17,5	;volatile
  4378  0578  0008               	return
  4379  0579                     __end_of_LIN_enableRx:	
  4380                           
  4381                           	psect	text28
  4382  0579                     __ptext28:	
  4383 ;; *************** function _LIN_disableRx *****************
  4384 ;; Defined at:
  4385 ;;		line 316 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		None
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;Total ram usage:        0 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    4
  4406 ;; This function calls:
  4407 ;;		Nothing
  4408 ;; This function is called by:
  4409 ;;		_LIN_handler
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           
  4414                           ;psect for function _LIN_disableRx
  4415  0579                     _LIN_disableRx:	
  4416                           
  4417                           ;lin_slave.c: 317: RCSTAbits.CREN = 0;
  4418                           
  4419                           ;incstack = 0
  4420                           ; Regs used in _LIN_disableRx: []
  4421  0579  0023               	movlb	3	; select bank3
  4422  057A  121D               	bcf	29,4	;volatile
  4423                           
  4424                           ;lin_slave.c: 318: PIE1bits.RCIE = 0;
  4425  057B  0021               	movlb	1	; select bank1
  4426  057C  1291               	bcf	17,5	;volatile
  4427  057D  0008               	return
  4428  057E                     __end_of_LIN_disableRx:	
  4429                           
  4430                           	psect	text29
  4431  0437                     __ptext29:	
  4432 ;; *************** function _LIN_checkPID *****************
  4433 ;; Defined at:
  4434 ;;		line 241 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;  pid             1    wreg     unsigned char 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  pid             1    9[COMMON] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      unsigned char 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;Total ram usage:        1 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:    5
  4455 ;; This function calls:
  4456 ;;		_LIN_calcParity
  4457 ;;		_LIN_getFromTable
  4458 ;; This function is called by:
  4459 ;;		_LIN_handler
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           
  4464                           ;psect for function _LIN_checkPID
  4465  0437                     _LIN_checkPID:	
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in _LIN_checkPID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4469                           ;LIN_checkPID@pid stored from wreg
  4470  0437  00F9               	movwf	LIN_checkPID@pid
  4471                           
  4472                           ;lin_slave.c: 242: if(LIN_getFromTable(pid, TYPE) == ERROR)
  4473  0438  01F2               	clrf	LIN_getFromTable@param
  4474  0439  0AF2               	incf	LIN_getFromTable@param,f
  4475  043A  0879               	movf	LIN_checkPID@pid,w
  4476  043B  3182  225C  3184   	fcall	_LIN_getFromTable
  4477  043E  3A02               	xorlw	2
  4478  043F  1D03               	skipz
  4479  0440  2C43               	goto	l1807
  4480                           
  4481                           ;lin_slave.c: 243: return 0;
  4482  0441  3000               	movlw	0
  4483  0442  0008               	return
  4484  0443                     l1807:	
  4485                           
  4486                           ;lin_slave.c: 245: if(pid == LIN_calcParity(pid & 0x3F))
  4487  0443  0879               	movf	LIN_checkPID@pid,w
  4488  0444  393F               	andlw	63
  4489  0445  3181  217B  3184   	fcall	_LIN_calcParity
  4490  0448  0679               	xorwf	LIN_checkPID@pid,w
  4491  0449  1D03               	skipz
  4492  044A  2C4D               	goto	l1813
  4493                           
  4494                           ;lin_slave.c: 246: return 1;
  4495  044B  3001               	movlw	1
  4496  044C  0008               	return
  4497  044D                     l1813:	
  4498                           
  4499                           ;lin_slave.c: 248: return 0;
  4500  044D  3000               	movlw	0
  4501  044E  0008               	return
  4502  044F                     __end_of_LIN_checkPID:	
  4503                           
  4504                           	psect	text30
  4505  025C                     __ptext30:	
  4506 ;; *************** function _LIN_getFromTable *****************
  4507 ;; Defined at:
  4508 ;;		line 211 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  cmd             1    wreg     unsigned char 
  4511 ;;  param           1    2[COMMON] enum E136
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;  cmd             1    5[COMMON] unsigned char 
  4514 ;;  length          1    6[COMMON] unsigned char 
  4515 ;;  rxCommand       2    7[COMMON] PTR const struct .
  4516 ;;		 -> ROM(8192), scheduleTable(16), 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      unsigned char 
  4519 ;; Registers used:
  4520 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4526 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;Total ram usage:        7 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    4
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_LIN_handler
  4537 ;;		_LIN_checkPID
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           
  4542                           ;psect for function _LIN_getFromTable
  4543  025C                     _LIN_getFromTable:	
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _LIN_getFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  4547                           ;LIN_getFromTable@cmd stored from wreg
  4548  025C  00F5               	movwf	LIN_getFromTable@cmd
  4549                           
  4550                           ;lin_slave.c: 212: const lin_rx_cmd_t* rxCommand = LIN_rxCommand;
  4551  025D  0020               	movlb	0	; select bank0
  4552  025E  0858               	movf	_LIN_rxCommand+1,w
  4553  025F  00F8               	movwf	LIN_getFromTable@rxCommand+1
  4554  0260  0857               	movf	_LIN_rxCommand,w
  4555  0261  00F7               	movwf	LIN_getFromTable@rxCommand
  4556                           
  4557                           ;lin_slave.c: 214: cmd &= 0x3F;
  4558  0262  303F               	movlw	63
  4559  0263  00F3               	movwf	??_LIN_getFromTable
  4560  0264  0873               	movf	??_LIN_getFromTable,w
  4561  0265  05F5               	andwf	LIN_getFromTable@cmd,f
  4562                           
  4563                           ;lin_slave.c: 216: for(uint8_t length = 0; length < LIN_rxCommandLength; length++){
  4564  0266  01F6               	clrf	LIN_getFromTable@length
  4565  0267                     l1637:	
  4566  0267  0861               	movf	_LIN_rxCommandLength,w
  4567  0268  0276               	subwf	LIN_getFromTable@length,w
  4568  0269  1803               	btfsc	3,0
  4569  026A  2AAA               	goto	l1653
  4570                           
  4571                           ;lin_slave.c: 217: if(cmd == rxCommand->cmd){
  4572  026B  0877               	movf	LIN_getFromTable@rxCommand,w
  4573  026C  0084               	movwf	4
  4574  026D  0878               	movf	LIN_getFromTable@rxCommand+1,w
  4575  026E  0085               	movwf	5
  4576  026F  0800               	movf	0,w	;code access
  4577  0270  0675               	xorwf	LIN_getFromTable@cmd,w
  4578  0271  1903               	btfsc	3,2
  4579  0272  2AAA               	goto	l1653
  4580                           
  4581                           ;lin_slave.c: 219: }
  4582                           ;lin_slave.c: 220: rxCommand++;
  4583                           
  4584                           ;lin_slave.c: 218: break;
  4585  0273  3004               	movlw	4
  4586  0274  07F7               	addwf	LIN_getFromTable@rxCommand,f
  4587  0275  3000               	movlw	0
  4588  0276  3DF8               	addwfc	LIN_getFromTable@rxCommand+1,f
  4589                           
  4590                           ;lin_slave.c: 222: if(length == (LIN_rxCommandLength-1)){
  4591  0277  0861               	movf	_LIN_rxCommandLength,w
  4592  0278  3EFF               	addlw	255
  4593  0279  00F3               	movwf	??_LIN_getFromTable
  4594  027A  30FF               	movlw	255
  4595  027B  1803               	skipnc
  4596  027C  3000               	movlw	0
  4597  027D  00F4               	movwf	??_LIN_getFromTable+1
  4598  027E  0876               	movf	LIN_getFromTable@length,w
  4599  027F  0673               	xorwf	??_LIN_getFromTable,w
  4600  0280  0474               	iorwf	??_LIN_getFromTable+1,w
  4601  0281  1D03               	skipz
  4602  0282  2A85               	goto	l1635
  4603                           
  4604                           ;lin_slave.c: 223: return ERROR;
  4605  0283  3002               	movlw	2
  4606  0284  0008               	return
  4607  0285                     l1635:	
  4608  0285  3001               	movlw	1
  4609  0286  00F3               	movwf	??_LIN_getFromTable
  4610  0287  0873               	movf	??_LIN_getFromTable,w
  4611  0288  07F6               	addwf	LIN_getFromTable@length,f
  4612  0289  2A67               	goto	l1637
  4613  028A                     l1639:	
  4614                           ;lin_slave.c: 228: case CMD:
  4615                           
  4616                           ;lin_slave.c: 224: }
  4617                           ;lin_slave.c: 225: }
  4618                           ;lin_slave.c: 227: switch(param){
  4619                           
  4620                           
  4621                           ;lin_slave.c: 229: return rxCommand->cmd;
  4622  028A  0877               	movf	LIN_getFromTable@rxCommand,w
  4623  028B  0084               	movwf	4
  4624  028C  0878               	movf	LIN_getFromTable@rxCommand+1,w
  4625  028D  0085               	movwf	5
  4626  028E  0800               	movf	0,w	;code access
  4627  028F  0008               	return
  4628  0290                     l1643:	
  4629                           ;lin_slave.c: 230: case TYPE:
  4630                           
  4631                           
  4632                           ;lin_slave.c: 231: return rxCommand->type;
  4633  0290  0878               	movf	LIN_getFromTable@rxCommand+1,w
  4634  0291  00F4               	movwf	??_LIN_getFromTable+1
  4635  0292  0877               	movf	LIN_getFromTable@rxCommand,w
  4636  0293  00F3               	movwf	??_LIN_getFromTable
  4637  0294  3001               	movlw	1
  4638  0295  0773               	addwf	??_LIN_getFromTable,w
  4639  0296  0084               	movwf	4
  4640  0297  0874               	movf	??_LIN_getFromTable+1,w
  4641  0298  1803               	skipnc
  4642  0299  0A74               	incf	??_LIN_getFromTable+1,w
  4643  029A  0085               	movwf	5
  4644  029B  0800               	movf	0,w	;code access
  4645  029C  0008               	return
  4646  029D                     l1647:	
  4647                           ;lin_slave.c: 232: case LENGTH:
  4648                           
  4649                           
  4650                           ;lin_slave.c: 233: return rxCommand->length;
  4651  029D  0878               	movf	LIN_getFromTable@rxCommand+1,w
  4652  029E  00F4               	movwf	??_LIN_getFromTable+1
  4653  029F  0877               	movf	LIN_getFromTable@rxCommand,w
  4654  02A0  00F3               	movwf	??_LIN_getFromTable
  4655  02A1  3002               	movlw	2
  4656  02A2  0773               	addwf	??_LIN_getFromTable,w
  4657  02A3  0084               	movwf	4
  4658  02A4  0874               	movf	??_LIN_getFromTable+1,w
  4659  02A5  1803               	skipnc
  4660  02A6  0A74               	incf	??_LIN_getFromTable+1,w
  4661  02A7  0085               	movwf	5
  4662  02A8  0800               	movf	0,w	;code access
  4663  02A9  0008               	return
  4664  02AA                     l1653:	
  4665                           ;lin_slave.c: 236: }
  4666                           
  4667                           ;lin_slave.c: 235: break;
  4668                           
  4669                           ;lin_slave.c: 234: default:
  4670                           
  4671  02AA  0872               	movf	LIN_getFromTable@param,w
  4672                           
  4673                           ; Switch size 1, requested type "space"
  4674                           ; Number of cases is 3, Range of values is 0 to 2
  4675                           ; switch strategies available:
  4676                           ; Name         Instructions Cycles
  4677                           ; simple_byte           10     6 (average)
  4678                           ; direct_byte           12     6 (fixed)
  4679                           ; jumptable            260     6 (fixed)
  4680                           ;	Chosen strategy is simple_byte
  4681  02AB  3A00               	xorlw	0	; case 0
  4682  02AC  1903               	skipnz
  4683  02AD  2A8A               	goto	l1639
  4684  02AE  3A01               	xorlw	1	; case 1
  4685  02AF  1903               	skipnz
  4686  02B0  2A90               	goto	l1643
  4687  02B1  3A03               	xorlw	3	; case 2
  4688  02B2  1903               	skipnz
  4689  02B3  2A9D               	goto	l1647
  4690  02B4  2AB5               	goto	l1655
  4691  02B5                     l1655:	
  4692                           
  4693                           ;lin_slave.c: 238: return ERROR;
  4694  02B5  3002               	movlw	2
  4695  02B6  0008               	return
  4696  02B7                     __end_of_LIN_getFromTable:	
  4697                           
  4698                           	psect	text31
  4699  017B                     __ptext31:	
  4700 ;; *************** function _LIN_calcParity *****************
  4701 ;; Defined at:
  4702 ;;		line 252 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  CMD             1    wreg     unsigned char 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  CMD             1    3[COMMON] unsigned char 
  4707 ;;  PID             1    4[COMMON] struct .
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  1    wreg      unsigned char 
  4710 ;; Registers used:
  4711 ;;		wreg, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:        3 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    4
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_LIN_checkPID
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           
  4732                           ;psect for function _LIN_calcParity
  4733  017B                     _LIN_calcParity:	
  4734                           
  4735                           ;incstack = 0
  4736                           ; Regs used in _LIN_calcParity: [wreg+status,0]
  4737                           ;LIN_calcParity@CMD stored from wreg
  4738  017B  00F3               	movwf	LIN_calcParity@CMD
  4739                           
  4740                           ;lin_slave.c: 253: lin_pid_t PID;
  4741                           ;lin_slave.c: 254: PID.rawPID = CMD;
  4742  017C  0873               	movf	LIN_calcParity@CMD,w
  4743  017D  00F2               	movwf	??_LIN_calcParity
  4744  017E  0872               	movf	??_LIN_calcParity,w
  4745  017F  00F4               	movwf	LIN_calcParity@PID
  4746                           
  4747                           ;lin_slave.c: 259: PID.P0 = PID.ID0 ^ PID.ID1;
  4748  0180  1CF4               	btfss	LIN_calcParity@PID,1
  4749  0181  2984               	goto	u910
  4750  0182  3001               	movlw	1
  4751  0183  2985               	goto	u912
  4752  0184                     u910:	
  4753  0184  3000               	movlw	0
  4754  0185                     u912:	
  4755  0185  00F2               	movwf	??_LIN_calcParity
  4756  0186  1C74               	btfss	LIN_calcParity@PID,0
  4757  0187  298A               	goto	u920
  4758  0188  3001               	movlw	1
  4759  0189  298B               	goto	u922
  4760  018A                     u920:	
  4761  018A  3000               	movlw	0
  4762  018B                     u922:	
  4763  018B  0672               	xorwf	??_LIN_calcParity,w
  4764  018C  1903               	btfsc	3,2
  4765  018D  2990               	goto	u930
  4766  018E  1774               	bsf	LIN_calcParity@PID,6
  4767  018F  2991               	goto	u944
  4768  0190                     u930:	
  4769  0190  1374               	bcf	LIN_calcParity@PID,6
  4770  0191                     u944:	
  4771                           
  4772                           ;lin_slave.c: 260: PID.P0 = PID.P0 ^ PID.ID2;
  4773  0191  1D74               	btfss	LIN_calcParity@PID,2
  4774  0192  2995               	goto	u950
  4775  0193  3001               	movlw	1
  4776  0194  2996               	goto	u952
  4777  0195                     u950:	
  4778  0195  3000               	movlw	0
  4779  0196                     u952:	
  4780  0196  00F2               	movwf	??_LIN_calcParity
  4781  0197  1F74               	btfss	LIN_calcParity@PID,6
  4782  0198  299B               	goto	u960
  4783  0199  3001               	movlw	1
  4784  019A  299C               	goto	u962
  4785  019B                     u960:	
  4786  019B  3000               	movlw	0
  4787  019C                     u962:	
  4788  019C  0672               	xorwf	??_LIN_calcParity,w
  4789  019D  1903               	btfsc	3,2
  4790  019E  29A1               	goto	u970
  4791  019F  1774               	bsf	LIN_calcParity@PID,6
  4792  01A0  29A2               	goto	u984
  4793  01A1                     u970:	
  4794  01A1  1374               	bcf	LIN_calcParity@PID,6
  4795  01A2                     u984:	
  4796                           
  4797                           ;lin_slave.c: 261: PID.P0 = PID.P0 ^ PID.ID4;
  4798  01A2  1E74               	btfss	LIN_calcParity@PID,4
  4799  01A3  29A6               	goto	u990
  4800  01A4  3001               	movlw	1
  4801  01A5  29A7               	goto	u992
  4802  01A6                     u990:	
  4803  01A6  3000               	movlw	0
  4804  01A7                     u992:	
  4805  01A7  00F2               	movwf	??_LIN_calcParity
  4806  01A8  1F74               	btfss	LIN_calcParity@PID,6
  4807  01A9  29AC               	goto	u1000
  4808  01AA  3001               	movlw	1
  4809  01AB  29AD               	goto	u1002
  4810  01AC                     u1000:	
  4811  01AC  3000               	movlw	0
  4812  01AD                     u1002:	
  4813  01AD  0672               	xorwf	??_LIN_calcParity,w
  4814  01AE  1903               	btfsc	3,2
  4815  01AF  29B2               	goto	u1010
  4816  01B0  1774               	bsf	LIN_calcParity@PID,6
  4817  01B1  29B3               	goto	u1024
  4818  01B2                     u1010:	
  4819  01B2  1374               	bcf	LIN_calcParity@PID,6
  4820  01B3                     u1024:	
  4821                           
  4822                           ;lin_slave.c: 262: PID.P1 = PID.ID1 ^ PID.ID3;
  4823  01B3  1DF4               	btfss	LIN_calcParity@PID,3
  4824  01B4  29B7               	goto	u1030
  4825  01B5  3001               	movlw	1
  4826  01B6  29B8               	goto	u1032
  4827  01B7                     u1030:	
  4828  01B7  3000               	movlw	0
  4829  01B8                     u1032:	
  4830  01B8  00F2               	movwf	??_LIN_calcParity
  4831  01B9  1CF4               	btfss	LIN_calcParity@PID,1
  4832  01BA  29BD               	goto	u1040
  4833  01BB  3001               	movlw	1
  4834  01BC  29BE               	goto	u1042
  4835  01BD                     u1040:	
  4836  01BD  3000               	movlw	0
  4837  01BE                     u1042:	
  4838  01BE  0672               	xorwf	??_LIN_calcParity,w
  4839  01BF  1903               	btfsc	3,2
  4840  01C0  29C3               	goto	u1050
  4841  01C1  17F4               	bsf	LIN_calcParity@PID,7
  4842  01C2  29C4               	goto	u1064
  4843  01C3                     u1050:	
  4844  01C3  13F4               	bcf	LIN_calcParity@PID,7
  4845  01C4                     u1064:	
  4846                           
  4847                           ;lin_slave.c: 263: PID.P1 = PID.P1 ^ PID.ID4;
  4848  01C4  1E74               	btfss	LIN_calcParity@PID,4
  4849  01C5  29C8               	goto	u1070
  4850  01C6  3001               	movlw	1
  4851  01C7  29C9               	goto	u1072
  4852  01C8                     u1070:	
  4853  01C8  3000               	movlw	0
  4854  01C9                     u1072:	
  4855  01C9  00F2               	movwf	??_LIN_calcParity
  4856  01CA  1FF4               	btfss	LIN_calcParity@PID,7
  4857  01CB  29CE               	goto	u1080
  4858  01CC  3001               	movlw	1
  4859  01CD  29CF               	goto	u1082
  4860  01CE                     u1080:	
  4861  01CE  3000               	movlw	0
  4862  01CF                     u1082:	
  4863  01CF  0672               	xorwf	??_LIN_calcParity,w
  4864  01D0  1903               	btfsc	3,2
  4865  01D1  29D4               	goto	u1090
  4866  01D2  17F4               	bsf	LIN_calcParity@PID,7
  4867  01D3  29D5               	goto	u1104
  4868  01D4                     u1090:	
  4869  01D4  13F4               	bcf	LIN_calcParity@PID,7
  4870  01D5                     u1104:	
  4871                           
  4872                           ;lin_slave.c: 264: PID.P1 = PID.P1 ^ PID.ID5;
  4873  01D5  1EF4               	btfss	LIN_calcParity@PID,5
  4874  01D6  29D9               	goto	u1110
  4875  01D7  3001               	movlw	1
  4876  01D8  29DA               	goto	u1112
  4877  01D9                     u1110:	
  4878  01D9  3000               	movlw	0
  4879  01DA                     u1112:	
  4880  01DA  00F2               	movwf	??_LIN_calcParity
  4881  01DB  1FF4               	btfss	LIN_calcParity@PID,7
  4882  01DC  29DF               	goto	u1120
  4883  01DD  3001               	movlw	1
  4884  01DE  29E0               	goto	u1122
  4885  01DF                     u1120:	
  4886  01DF  3000               	movlw	0
  4887  01E0                     u1122:	
  4888  01E0  0672               	xorwf	??_LIN_calcParity,w
  4889  01E1  1903               	btfsc	3,2
  4890  01E2  29E5               	goto	u1130
  4891  01E3  17F4               	bsf	LIN_calcParity@PID,7
  4892  01E4  29E6               	goto	l1671
  4893  01E5                     u1130:	
  4894  01E5  13F4               	bcf	LIN_calcParity@PID,7
  4895  01E6                     l1671:	
  4896                           
  4897                           ;lin_slave.c: 265: PID.P1 = ~PID.P1;
  4898  01E6  1003               	clrc
  4899  01E7  1FF4               	btfss	LIN_calcParity@PID,7
  4900  01E8  1403               	setc
  4901  01E9  1C03               	btfss	3,0
  4902  01EA  29ED               	goto	u1150
  4903  01EB  17F4               	bsf	LIN_calcParity@PID,7
  4904  01EC  29EE               	goto	l1673
  4905  01ED                     u1150:	
  4906  01ED  13F4               	bcf	LIN_calcParity@PID,7
  4907  01EE                     l1673:	
  4908                           
  4909                           ;lin_slave.c: 267: return PID.rawPID;
  4910  01EE  0874               	movf	LIN_calcParity@PID,w
  4911  01EF  0008               	return
  4912  01F0                     __end_of_LIN_calcParity:	
  4913                           
  4914                           	psect	text32
  4915  04EF                     __ptext32:	
  4916 ;; *************** function _LIN_breakCheck *****************
  4917 ;; Defined at:
  4918 ;;		line 321 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      unsigned char 
  4925 ;; Registers used:
  4926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;Total ram usage:        0 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:    5
  4939 ;; This function calls:
  4940 ;;		_EUSART_Read
  4941 ;;		_EUSART_get_last_status
  4942 ;; This function is called by:
  4943 ;;		_LIN_handler
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           
  4948                           ;psect for function _LIN_breakCheck
  4949  04EF                     _LIN_breakCheck:	
  4950                           
  4951                           ;lin_slave.c: 323: if((EUSART_Read() == 0x00) && (EUSART_get_last_status().ferr == 1)){
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _LIN_breakCheck: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4955  04EF  3183  2351  3184   	fcall	_EUSART_Read
  4956  04F2  3A00               	xorlw	0
  4957  04F3  1D03               	skipz
  4958  04F4  2CFC               	goto	l1797
  4959  04F5  3185  258B  3184   	fcall	_EUSART_get_last_status
  4960  04F8  1C89               	btfss	9,1
  4961  04F9  2CFC               	goto	l1797
  4962                           
  4963                           ;lin_slave.c: 324: return 1;
  4964  04FA  3001               	movlw	1
  4965  04FB  0008               	return
  4966  04FC                     l1797:	
  4967                           
  4968                           ;lin_slave.c: 325: }
  4969                           ;lin_slave.c: 327: return 0;
  4970  04FC  3000               	movlw	0
  4971  04FD  0008               	return
  4972  04FE                     __end_of_LIN_breakCheck:	
  4973                           
  4974                           	psect	text33
  4975  058B                     __ptext33:	
  4976 ;; *************** function _EUSART_get_last_status *****************
  4977 ;; Defined at:
  4978 ;;		line 144 in file "mcc_generated_files/eusart.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      struct .
  4985 ;; Registers used:
  4986 ;;		wreg
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    4
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_LIN_breakCheck
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _EUSART_get_last_status
  5008  058B                     _EUSART_get_last_status:	
  5009                           
  5010                           ;eusart.c: 145: return eusartRxLastError;
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _EUSART_get_last_status: [wreg]
  5014  058B  0020               	movlb	0	; select bank0
  5015  058C  0838               	movf	_eusartRxLastError,w	;volatile
  5016  058D  0008               	return
  5017  058E                     __end_of_EUSART_get_last_status:	
  5018                           
  5019                           	psect	text34
  5020  0351                     __ptext34:	
  5021 ;; *************** function _EUSART_Read *****************
  5022 ;; Defined at:
  5023 ;;		line 148 in file "mcc_generated_files/eusart.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;  readValue       1    3[COMMON] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  1    wreg      unsigned char 
  5030 ;; Registers used:
  5031 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:        2 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    4
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_LIN_handler
  5048 ;;		_LIN_breakCheck
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           
  5053                           ;psect for function _EUSART_Read
  5054  0351                     _EUSART_Read:	
  5055                           
  5056                           ;eusart.c: 150: uint8_t readValue = 0;
  5057                           
  5058                           ;incstack = 0
  5059                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  5060  0351  01F3               	clrf	EUSART_Read@readValue
  5061  0352                     l1599:	
  5062                           ;eusart.c: 153: {
  5063                           
  5064                           ;eusart.c: 152: while(0 == eusartRxCount)
  5065                           
  5066  0352  0020               	movlb	0	; select bank0
  5067  0353  0839               	movf	_eusartRxCount,w	;volatile
  5068  0354  1903               	btfsc	3,2
  5069  0355  2B52               	goto	l1599
  5070                           
  5071                           ;eusart.c: 154: }
  5072                           ;eusart.c: 156: eusartRxLastError = eusartRxStatusBuffer[eusartRxTail];
  5073  0356  087A               	movf	_eusartRxTail,w	;volatile
  5074  0357  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  5075  0358  0086               	movwf	6
  5076  0359  0187               	clrf	7
  5077  035A  0801               	movf	1,w
  5078  035B  00F2               	movwf	??_EUSART_Read
  5079  035C  0872               	movf	??_EUSART_Read,w
  5080  035D  00B8               	movwf	_eusartRxLastError	;volatile
  5081                           
  5082                           ;eusart.c: 158: readValue = eusartRxBuffer[eusartRxTail++];
  5083  035E  087A               	movf	_eusartRxTail,w
  5084  035F  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5085  0360  0086               	movwf	6
  5086  0361  0187               	clrf	7
  5087  0362  0801               	movf	1,w
  5088  0363  00F2               	movwf	??_EUSART_Read
  5089  0364  0872               	movf	??_EUSART_Read,w
  5090  0365  00F3               	movwf	EUSART_Read@readValue
  5091  0366  3001               	movlw	1
  5092  0367  00F2               	movwf	??_EUSART_Read
  5093  0368  0872               	movf	??_EUSART_Read,w
  5094  0369  07FA               	addwf	_eusartRxTail,f	;volatile
  5095                           
  5096                           ;eusart.c: 159: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  5097  036A  3008               	movlw	8
  5098  036B  027A               	subwf	_eusartRxTail,w	;volatile
  5099  036C  1803               	btfsc	3,0
  5100                           
  5101                           ;eusart.c: 160: {
  5102                           ;eusart.c: 161: eusartRxTail = 0;
  5103  036D  01FA               	clrf	_eusartRxTail	;volatile
  5104                           
  5105                           ;eusart.c: 162: }
  5106                           ;eusart.c: 163: PIE1bits.RCIE = 0;
  5107  036E  0021               	movlb	1	; select bank1
  5108  036F  1291               	bcf	17,5	;volatile
  5109                           
  5110                           ;eusart.c: 164: eusartRxCount--;
  5111  0370  3001               	movlw	1
  5112  0371  0020               	movlb	0	; select bank0
  5113  0372  02B9               	subwf	_eusartRxCount,f	;volatile
  5114                           
  5115                           ;eusart.c: 165: PIE1bits.RCIE = 1;
  5116  0373  0021               	movlb	1	; select bank1
  5117  0374  1691               	bsf	17,5	;volatile
  5118                           
  5119                           ;eusart.c: 167: return readValue;
  5120  0375  0873               	movf	EUSART_Read@readValue,w
  5121  0376  0008               	return
  5122  0377                     __end_of_EUSART_Read:	
  5123                           
  5124                           	psect	text35
  5125  058E                     __ptext35:	
  5126 ;; *************** function _EUSART_is_rx_ready *****************
  5127 ;; Defined at:
  5128 ;;		line 134 in file "mcc_generated_files/eusart.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      unsigned char 
  5135 ;; Registers used:
  5136 ;;		wreg
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; Hardware stack levels required when called:    4
  5149 ;; This function calls:
  5150 ;;		Nothing
  5151 ;; This function is called by:
  5152 ;;		_LIN_handler
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           
  5157                           ;psect for function _EUSART_is_rx_ready
  5158  058E                     _EUSART_is_rx_ready:	
  5159                           
  5160                           ;eusart.c: 136: return eusartRxCount;
  5161                           
  5162                           ;incstack = 0
  5163                           ; Regs used in _EUSART_is_rx_ready: [wreg]
  5164  058E  0020               	movlb	0	; select bank0
  5165  058F  0839               	movf	_eusartRxCount,w	;volatile
  5166  0590  0008               	return
  5167  0591                     __end_of_EUSART_is_rx_ready:	
  5168                           
  5169                           	psect	intentry
  5170  0004                     __pintentry:	
  5171 ;; *************** function _INTERRUPT_InterruptManager *****************
  5172 ;; Defined at:
  5173 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;		None
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;		None
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  1    wreg      void 
  5180 ;; Registers used:
  5181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;Total ram usage:        1 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    3
  5194 ;; This function calls:
  5195 ;;		Absolute function
  5196 ;;		_EUSART_Receive_ISR
  5197 ;;		_EUSART_Transmit_ISR
  5198 ;;		_TMR0_ISR
  5199 ;; This function is called by:
  5200 ;;		Interrupt level 1
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204  0004                     _INTERRUPT_InterruptManager:	
  5205                           
  5206                           ;incstack = 0
  5207  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  5208                           
  5209                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5210  0005  3180               	pagesel	$
  5211  0006  0020               	movlb	0	; select bank0
  5212  0007  087F               	movf	127,w
  5213  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
  5214                           
  5215                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5216  0009  1A8B               	btfsc	11,5	;volatile
  5217  000A  1D0B               	btfss	11,2	;volatile
  5218  000B  2810               	goto	i1l53
  5219                           
  5220                           ;interrupt_manager.c: 56: {
  5221                           ;interrupt_manager.c: 57: TMR0_ISR();
  5222  000C  3185  250C  3180   	fcall	_TMR0_ISR
  5223                           
  5224                           ;interrupt_manager.c: 58: }
  5225  000F  2829               	goto	i1l61
  5226  0010                     i1l53:	
  5227                           
  5228                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
  5229  0010  1F0B               	btfss	11,6	;volatile
  5230  0011  2829               	goto	i1l61
  5231                           
  5232                           ;interrupt_manager.c: 60: {
  5233                           ;interrupt_manager.c: 61: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  5234  0012  0021               	movlb	1	; select bank1
  5235  0013  1E11               	btfss	17,4	;volatile
  5236  0014  281E               	goto	i1l56
  5237  0015  0020               	movlb	0	; select bank0
  5238  0016  1E11               	btfss	17,4	;volatile
  5239  0017  281E               	goto	i1l56
  5240                           
  5241                           ;interrupt_manager.c: 62: {
  5242                           ;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
  5243  0018  085E               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  5244  0019  008A               	movwf	10
  5245  001A  085D               	movf	_EUSART_TxDefaultInterruptHandler,w
  5246  001B  000A               	callw
  5247  001C  3180               	pagesel	$
  5248                           
  5249                           ;interrupt_manager.c: 64: }
  5250  001D  2829               	goto	i1l61
  5251  001E                     i1l56:	
  5252                           
  5253                           ;interrupt_manager.c: 65: else if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  5254  001E  0021               	movlb	1	; select bank1
  5255  001F  1E91               	btfss	17,5	;volatile
  5256  0020  2829               	goto	i1l61
  5257  0021  0020               	movlb	0	; select bank0
  5258  0022  1E91               	btfss	17,5	;volatile
  5259  0023  2829               	goto	i1l61
  5260                           
  5261                           ;interrupt_manager.c: 66: {
  5262                           ;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
  5263  0024  085C               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  5264  0025  008A               	movwf	10
  5265  0026  085B               	movf	_EUSART_RxDefaultInterruptHandler,w
  5266  0027  000A               	callw
  5267  0028  3180               	pagesel	$
  5268  0029                     i1l61:	
  5269                           ;interrupt_manager.c: 74: else
  5270                           ;interrupt_manager.c: 75: {
  5271                           
  5272                           ;interrupt_manager.c: 72: }
  5273                           ;interrupt_manager.c: 73: }
  5274                           
  5275                           ;interrupt_manager.c: 69: else
  5276                           ;interrupt_manager.c: 70: {
  5277                           
  5278                           ;interrupt_manager.c: 68: }
  5279                           
  5280  0029  0871               	movf	??_INTERRUPT_InterruptManager,w
  5281  002A  0020               	movlb	0	; select bank0
  5282  002B  00FF               	movwf	127
  5283  002C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5284  002D  0009               	retfie
  5285  002E                     __end_of_INTERRUPT_InterruptManager:	
  5286                           
  5287                           	psect	text37
  5288  050C                     __ptext37:	
  5289 ;; *************** function _TMR0_ISR *****************
  5290 ;; Defined at:
  5291 ;;		line 108 in file "mcc_generated_files/tmr0.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, pclath, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    2
  5312 ;; This function calls:
  5313 ;;		Absolute function
  5314 ;;		_LIN_timerHandler
  5315 ;;		_TMR0_DefaultInterruptHandler
  5316 ;; This function is called by:
  5317 ;;		_INTERRUPT_InterruptManager
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           
  5322                           ;psect for function _TMR0_ISR
  5323  050C                     _TMR0_ISR:	
  5324                           
  5325                           ;tmr0.c: 112: INTCONbits.TMR0IF = 0;
  5326                           
  5327                           ;incstack = 0
  5328                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
  5329  050C  110B               	bcf	11,2	;volatile
  5330                           
  5331                           ;tmr0.c: 114: TMR0 = timer0ReloadVal;
  5332  050D  0020               	movlb	0	; select bank0
  5333  050E  0860               	movf	_timer0ReloadVal,w	;volatile
  5334  050F  0095               	movwf	21	;volatile
  5335                           
  5336                           ;tmr0.c: 116: if(TMR0_InterruptHandler)
  5337  0510  0855               	movf	_TMR0_InterruptHandler,w
  5338  0511  0456               	iorwf	_TMR0_InterruptHandler+1,w
  5339  0512  1903               	btfsc	3,2
  5340  0513  0008               	return
  5341                           
  5342                           ;tmr0.c: 117: {
  5343                           ;tmr0.c: 118: TMR0_InterruptHandler();
  5344  0514  0856               	movf	_TMR0_InterruptHandler+1,w
  5345  0515  008A               	movwf	10
  5346  0516  0855               	movf	_TMR0_InterruptHandler,w
  5347  0517  000A               	callw
  5348  0518  3185               	pagesel	$
  5349  0519  0008               	return
  5350  051A                     __end_of_TMR0_ISR:	
  5351                           
  5352                           	psect	text38
  5353  0526                     __ptext38:	
  5354 ;; *************** function _LIN_timerHandler *****************
  5355 ;; Defined at:
  5356 ;;		line 290 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;		None
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0, pclath, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;Total ram usage:        1 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    1
  5377 ;; This function calls:
  5378 ;;		i1_LIN_stopTimer
  5379 ;; This function is called by:
  5380 ;;		_LIN_setTimerHandler
  5381 ;;		_TMR0_ISR
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           
  5386                           ;psect for function _LIN_timerHandler
  5387  0526                     _LIN_timerHandler:	
  5388                           
  5389                           ;lin_slave.c: 293: if (++CountCallBack >= LIN_timeout)
  5390                           
  5391                           ;incstack = 0
  5392                           ; Regs used in _LIN_timerHandler: [wreg+status,2+status,0+pclath+cstack]
  5393  0526  3001               	movlw	1
  5394  0527  00F0               	movwf	??_LIN_timerHandler
  5395  0528  0870               	movf	??_LIN_timerHandler,w
  5396  0529  0020               	movlb	0	; select bank0
  5397  052A  07BE               	addwf	_CountCallBack,f	;volatile
  5398  052B  086E               	movf	_LIN_timeout,w
  5399  052C  023E               	subwf	_CountCallBack,w	;volatile
  5400  052D  1C03               	skipc
  5401  052E  0008               	return
  5402                           
  5403                           ;lin_slave.c: 294: {
  5404                           ;lin_slave.c: 296: LIN_stopTimer();
  5405  052F  3185  257E         	fcall	i1_LIN_stopTimer
  5406  0531  0008               	return
  5407  0532                     __end_of_LIN_timerHandler:	
  5408                           
  5409                           	psect	text39
  5410  0595                     __ptext39:	
  5411 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  5412 ;; Defined at:
  5413 ;;		line 129 in file "mcc_generated_files/tmr0.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;		None
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;		None
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  1    wreg      void 
  5420 ;; Registers used:
  5421 ;;		None
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;Total ram usage:        0 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_TMR0_Initialize
  5437 ;;		_TMR0_ISR
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function _TMR0_DefaultInterruptHandler
  5443  0595                     _TMR0_DefaultInterruptHandler:	
  5444                           
  5445                           ;incstack = 0
  5446                           ; Regs used in _TMR0_DefaultInterruptHandler: []
  5447  0595  0008               	return
  5448  0596                     __end_of_TMR0_DefaultInterruptHandler:	
  5449                           
  5450                           	psect	text40
  5451  057E                     __ptext40:	
  5452 ;; *************** function i1_LIN_stopTimer *****************
  5453 ;; Defined at:
  5454 ;;		line 304 in file "mcc_generated_files/LINDrivers/lin_slave.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;		None
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;		None
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		status,2
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;Total ram usage:        0 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_LIN_timerHandler
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           
  5482                           ;psect for function i1_LIN_stopTimer
  5483  057E                     i1_LIN_stopTimer:	
  5484                           
  5485                           ;lin_slave.c: 305: __nop();
  5486                           
  5487                           ;incstack = 0
  5488                           ; Regs used in i1_LIN_stopTimer: [status,2]
  5489  057E  0000               	nop
  5490                           
  5491                           ;lin_slave.c: 307: CountCallBack = 0;
  5492  057F  0020               	movlb	0	; select bank0
  5493  0580  01BE               	clrf	_CountCallBack	;volatile
  5494                           
  5495                           ;lin_slave.c: 308: LIN_timerRunning = 0;
  5496  0581  01BF               	clrf	_LIN_timerRunning
  5497  0582  0008               	return
  5498  0583                     __end_ofi1_LIN_stopTimer:	
  5499                           
  5500                           	psect	text41
  5501  0400                     __ptext41:	
  5502 ;; *************** function _EUSART_Transmit_ISR *****************
  5503 ;; Defined at:
  5504 ;;		line 194 in file "mcc_generated_files/eusart.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;Total ram usage:        1 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_EUSART_Initialize
  5528 ;;		_INTERRUPT_InterruptManager
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _EUSART_Transmit_ISR
  5534  0400                     _EUSART_Transmit_ISR:	
  5535                           
  5536                           ;eusart.c: 198: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  5540  0400  3008               	movlw	8
  5541  0401  0020               	movlb	0	; select bank0
  5542  0402  025F               	subwf	_eusartTxBufferRemaining,w	;volatile
  5543  0403  1803               	skipnc
  5544  0404  2C1A               	goto	i1l455
  5545                           
  5546                           ;eusart.c: 199: {
  5547                           ;eusart.c: 200: TXREG = eusartTxBuffer[eusartTxTail++];
  5548  0405  083A               	movf	_eusartTxTail,w
  5549  0406  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5550  0407  0086               	movwf	6
  5551  0408  0187               	clrf	7
  5552  0409  0801               	movf	1,w
  5553  040A  0023               	movlb	3	; select bank3
  5554  040B  009A               	movwf	26	;volatile
  5555  040C  3001               	movlw	1
  5556  040D  00F0               	movwf	??_EUSART_Transmit_ISR
  5557  040E  0870               	movf	??_EUSART_Transmit_ISR,w
  5558  040F  0020               	movlb	0	; select bank0
  5559  0410  07BA               	addwf	_eusartTxTail,f	;volatile
  5560                           
  5561                           ;eusart.c: 201: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  5562  0411  3008               	movlw	8
  5563  0412  023A               	subwf	_eusartTxTail,w	;volatile
  5564  0413  1803               	btfsc	3,0
  5565                           
  5566                           ;eusart.c: 202: {
  5567                           ;eusart.c: 203: eusartTxTail = 0;
  5568  0414  01BA               	clrf	_eusartTxTail	;volatile
  5569                           
  5570                           ;eusart.c: 204: }
  5571                           ;eusart.c: 205: eusartTxBufferRemaining++;
  5572  0415  3001               	movlw	1
  5573  0416  00F0               	movwf	??_EUSART_Transmit_ISR
  5574  0417  0870               	movf	??_EUSART_Transmit_ISR,w
  5575  0418  07DF               	addwf	_eusartTxBufferRemaining,f	;volatile
  5576                           
  5577                           ;eusart.c: 206: }
  5578  0419  0008               	return
  5579  041A                     i1l455:	
  5580                           
  5581                           ;eusart.c: 207: else
  5582                           ;eusart.c: 208: {
  5583                           ;eusart.c: 209: PIE1bits.TXIE = 0;
  5584  041A  0021               	movlb	1	; select bank1
  5585  041B  1211               	bcf	17,4	;volatile
  5586  041C  0008               	return
  5587  041D                     __end_of_EUSART_Transmit_ISR:	
  5588                           
  5589                           	psect	text42
  5590  02F5                     __ptext42:	
  5591 ;; *************** function _EUSART_Receive_ISR *****************
  5592 ;; Defined at:
  5593 ;;		line 213 in file "mcc_generated_files/eusart.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;		None
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;		None
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  1    wreg      void 
  5600 ;; Registers used:
  5601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5611 ;;Total ram usage:        0 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    2
  5614 ;; This function calls:
  5615 ;;		Absolute function
  5616 ;;		_EUSART_DefaultErrorHandler
  5617 ;;		_EUSART_DefaultFramingErrorHandler
  5618 ;;		_EUSART_DefaultOverrunErrorHandler
  5619 ;;		_EUSART_RxDataHandler
  5620 ;; This function is called by:
  5621 ;;		_EUSART_Initialize
  5622 ;;		_INTERRUPT_InterruptManager
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _EUSART_Receive_ISR
  5628  02F5                     _EUSART_Receive_ISR:	
  5629                           
  5630                           ;eusart.c: 216: eusartRxStatusBuffer[eusartRxHead].status = 0;
  5631                           
  5632                           ;incstack = 0
  5633                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5634  02F5  087B               	movf	_eusartRxHead,w	;volatile
  5635  02F6  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  5636  02F7  0086               	movwf	6
  5637  02F8  0187               	clrf	7
  5638  02F9  0181               	clrf	1
  5639                           
  5640                           ;eusart.c: 218: if(RCSTAbits.FERR){
  5641  02FA  0023               	movlb	3	; select bank3
  5642  02FB  1D1D               	btfss	29,2	;volatile
  5643  02FC  2B08               	goto	i1l1965
  5644                           
  5645                           ;eusart.c: 219: eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  5646  02FD  087B               	movf	_eusartRxHead,w	;volatile
  5647  02FE  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  5648  02FF  0086               	movwf	6
  5649  0300  0187               	clrf	7
  5650  0301  1481               	bsf	1,1
  5651                           
  5652                           ;eusart.c: 220: EUSART_FramingErrorHandler();
  5653  0302  0020               	movlb	0	; select bank0
  5654  0303  0854               	movf	_EUSART_FramingErrorHandler+1,w
  5655  0304  008A               	movwf	10
  5656  0305  0853               	movf	_EUSART_FramingErrorHandler,w
  5657  0306  000A               	callw
  5658  0307  3182               	pagesel	$
  5659  0308                     i1l1965:	
  5660                           
  5661                           ;eusart.c: 221: }
  5662                           ;eusart.c: 223: if(RCSTAbits.OERR){
  5663  0308  0023               	movlb	3	; select bank3
  5664  0309  1C9D               	btfss	29,1	;volatile
  5665  030A  2B16               	goto	i1l1971
  5666                           
  5667                           ;eusart.c: 224: eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  5668  030B  087B               	movf	_eusartRxHead,w	;volatile
  5669  030C  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  5670  030D  0086               	movwf	6
  5671  030E  0187               	clrf	7
  5672  030F  1501               	bsf	1,2
  5673                           
  5674                           ;eusart.c: 225: EUSART_OverrunErrorHandler();
  5675  0310  0020               	movlb	0	; select bank0
  5676  0311  0852               	movf	_EUSART_OverrunErrorHandler+1,w
  5677  0312  008A               	movwf	10
  5678  0313  0851               	movf	_EUSART_OverrunErrorHandler,w
  5679  0314  000A               	callw
  5680  0315  3182               	pagesel	$
  5681  0316                     i1l1971:	
  5682                           
  5683                           ;eusart.c: 226: }
  5684                           ;eusart.c: 228: if(eusartRxStatusBuffer[eusartRxHead].status){
  5685  0316  087B               	movf	_eusartRxHead,w	;volatile
  5686  0317  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  5687  0318  0086               	movwf	6
  5688  0319  0187               	clrf	7
  5689  031A  0801               	movf	1,w
  5690  031B  1903               	btfsc	3,2
  5691  031C  2B24               	goto	i1l1975
  5692                           
  5693                           ;eusart.c: 229: EUSART_ErrorHandler();
  5694  031D  0021               	movlb	1	; select bank1
  5695  031E  082C               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  5696  031F  008A               	movwf	10
  5697  0320  082B               	movf	_EUSART_ErrorHandler^(0+128),w
  5698  0321  000A               	callw
  5699  0322  3182               	pagesel	$
  5700                           
  5701                           ;eusart.c: 230: } else {
  5702  0323  0008               	return
  5703  0324                     i1l1975:	
  5704                           
  5705                           ;eusart.c: 231: EUSART_RxDataHandler();
  5706  0324  3184  2466         	fcall	_EUSART_RxDataHandler
  5707  0326  0008               	return
  5708  0327                     __end_of_EUSART_Receive_ISR:	
  5709                           
  5710                           	psect	text43
  5711  0587                     __ptext43:	
  5712 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  5713 ;; Defined at:
  5714 ;;		line 249 in file "mcc_generated_files/eusart.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;		None
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;		None
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		None
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;Total ram usage:        0 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_EUSART_Initialize
  5738 ;;		_EUSART_Receive_ISR
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           
  5743                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  5744  0587                     _EUSART_DefaultOverrunErrorHandler:	
  5745                           
  5746                           ;eusart.c: 252: RCSTAbits.CREN = 0;
  5747                           
  5748                           ;incstack = 0
  5749                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  5750  0587  0023               	movlb	3	; select bank3
  5751  0588  121D               	bcf	29,4	;volatile
  5752                           
  5753                           ;eusart.c: 253: RCSTAbits.CREN = 1;
  5754  0589  161D               	bsf	29,4	;volatile
  5755  058A  0008               	return
  5756  058B                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  5757                           
  5758                           	psect	text44
  5759  0596                     __ptext44:	
  5760 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  5761 ;; Defined at:
  5762 ;;		line 247 in file "mcc_generated_files/eusart.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;		None
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;		None
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  1    wreg      void 
  5769 ;; Registers used:
  5770 ;;		None
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;Total ram usage:        0 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_EUSART_Initialize
  5786 ;;		_EUSART_Receive_ISR
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           
  5791                           ;psect for function _EUSART_DefaultFramingErrorHandler
  5792  0596                     _EUSART_DefaultFramingErrorHandler:	
  5793                           
  5794                           ;incstack = 0
  5795                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  5796  0596  0008               	return
  5797  0597                     __end_of_EUSART_DefaultFramingErrorHandler:	
  5798                           
  5799                           	psect	text45
  5800  0591                     __ptext45:	
  5801 ;; *************** function _EUSART_DefaultErrorHandler *****************
  5802 ;; Defined at:
  5803 ;;		line 257 in file "mcc_generated_files/eusart.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;		None
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 0/0
  5814 ;;		On exit  : 0/0
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        0 bytes
  5822 ;; Hardware stack levels used:    1
  5823 ;; Hardware stack levels required when called:    1
  5824 ;; This function calls:
  5825 ;;		_EUSART_RxDataHandler
  5826 ;; This function is called by:
  5827 ;;		_EUSART_Initialize
  5828 ;;		_EUSART_Receive_ISR
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           
  5833                           ;psect for function _EUSART_DefaultErrorHandler
  5834  0591                     _EUSART_DefaultErrorHandler:	
  5835                           
  5836                           ;eusart.c: 258: EUSART_RxDataHandler();
  5837                           
  5838                           ;incstack = 0
  5839                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5840  0591  3184  2466         	fcall	_EUSART_RxDataHandler
  5841  0593  0008               	return
  5842  0594                     __end_of_EUSART_DefaultErrorHandler:	
  5843                           
  5844                           	psect	text46
  5845  0466                     __ptext46:	
  5846 ;; *************** function _EUSART_RxDataHandler *****************
  5847 ;; Defined at:
  5848 ;;		line 237 in file "mcc_generated_files/eusart.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;		None
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  1    wreg      void 
  5855 ;; Registers used:
  5856 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;Total ram usage:        1 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; This function calls:
  5869 ;;		Nothing
  5870 ;; This function is called by:
  5871 ;;		_EUSART_Receive_ISR
  5872 ;;		_EUSART_DefaultErrorHandler
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function _EUSART_RxDataHandler
  5878  0466                     _EUSART_RxDataHandler:	
  5879                           
  5880                           ;eusart.c: 239: eusartRxBuffer[eusartRxHead++] = RCREG;
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  5884  0466  0023               	movlb	3	; select bank3
  5885  0467  0819               	movf	25,w	;volatile
  5886  0468  00F0               	movwf	??_EUSART_RxDataHandler
  5887  0469  087B               	movf	_eusartRxHead,w
  5888  046A  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  5889  046B  0086               	movwf	6
  5890  046C  0187               	clrf	7
  5891  046D  0870               	movf	??_EUSART_RxDataHandler,w
  5892  046E  0081               	movwf	1
  5893  046F  3001               	movlw	1
  5894  0470  00F0               	movwf	??_EUSART_RxDataHandler
  5895  0471  0870               	movf	??_EUSART_RxDataHandler,w
  5896  0472  07FB               	addwf	_eusartRxHead,f	;volatile
  5897                           
  5898                           ;eusart.c: 240: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  5899  0473  3008               	movlw	8
  5900  0474  027B               	subwf	_eusartRxHead,w	;volatile
  5901  0475  1803               	btfsc	3,0
  5902                           
  5903                           ;eusart.c: 241: {
  5904                           ;eusart.c: 242: eusartRxHead = 0;
  5905  0476  01FB               	clrf	_eusartRxHead	;volatile
  5906                           
  5907                           ;eusart.c: 243: }
  5908                           ;eusart.c: 244: eusartRxCount++;
  5909  0477  3001               	movlw	1
  5910  0478  00F0               	movwf	??_EUSART_RxDataHandler
  5911  0479  0870               	movf	??_EUSART_RxDataHandler,w
  5912  047A  0020               	movlb	0	; select bank0
  5913  047B  07B9               	addwf	_eusartRxCount,f	;volatile
  5914  047C  0008               	return
  5915  047D                     __end_of_EUSART_RxDataHandler:	
  5916  007E                     btemp	set	126	;btemp
  5917  007E                     int$flags	set	126
  5918  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    16
    Data        1
    BSS         59
    Persistent  19
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     12      79
    BANK1            80      3      13
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    __builtin_memcpy$1	PTR const void  size(1) Largest target is 13
		 -> LIN_packet.data(BANK0[8]), LIN_packet(BANK0[13]), led_Data(BANK0[1]), LFRX_Data(BANK1[8]), 
		 -> RSSI_Data(BANK0[1]), UNLOCK_Data(BANK0[1]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 13
		 -> processLIN@tempRxData(BANK0[8]), LIN_packet(BANK0[13]), 

    memset@p1	PTR void  size(1) Largest target is 13
		 -> LIN_packet(BANK0[13]), 

    memset@p	PTR unsigned char  size(1) Largest target is 13
		 -> LIN_packet(BANK0[13]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), LIN_timerHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), LIN_timerHandler(), 

    LIN_getChecksum@data	PTR unsigned char  size(1) Largest target is 13
		 -> LIN_packet(BANK0[13]), 

    LIN_getFromTable@rxCommand.data	PTR unsigned char  size(1) Largest target is 8
		 -> led_Data(BANK0[1]), LFRX_Data(BANK1[8]), RSSI_Data(BANK0[1]), UNLOCK_Data(BANK0[1]), 

    LIN_getFromTable@rxCommand	PTR const struct . size(2) Largest target is 8192
		 -> ROM(CODE[8192]), scheduleTable(CODE[16]), 

    LIN_getPacket@data	PTR unsigned char  size(1) Largest target is 8
		 -> processLIN@tempRxData(BANK0[8]), 

    LIN_sendPacket@data	PTR unsigned char  size(1) Largest target is 13
		 -> LIN_packet(BANK0[13]), 

    sp__memset	PTR void  size(1) Largest target is 13
		 -> LIN_packet(BANK0[13]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    LIN_queuePacket@tempSchedule.data	PTR unsigned char  size(1) Largest target is 8
		 -> led_Data(BANK0[1]), LFRX_Data(BANK1[8]), RSSI_Data(BANK0[1]), UNLOCK_Data(BANK0[1]), 

    LIN_queuePacket@tempSchedule	PTR const struct . size(2) Largest target is 8192
		 -> ROM(CODE[8192]), scheduleTable(CODE[16]), 

    LIN_init@processData	PTR FTN()void  size(2) Largest target is 1
		 -> processLIN(), 

    LIN_processData	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), processLIN(), 

    LIN_init@command	const PTR const struct . size(2) Largest target is 20
		 -> scheduleTable(CODE[16]), 

    LIN_rxCommand	PTR const struct . size(2) Largest target is 8192
		 -> ROM(CODE[8192]), scheduleTable(CODE[16]), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    S77$data	PTR unsigned char  size(1) Largest target is 8
		 -> led_Data(BANK0[1]), LFRX_Data(BANK1[8]), RSSI_Data(BANK0[1]), UNLOCK_Data(BANK0[1]), 

    scheduleTable.data	PTR unsigned char  size(1) Largest target is 8
		 -> led_Data(BANK0[1]), LFRX_Data(BANK1[8]), RSSI_Data(BANK0[1]), UNLOCK_Data(BANK0[1]), 


Critical Paths under _main in COMMON

    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _LIN_Slave_Initialize->_LIN_init
    _LIN_setTimerHandler->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _LIN_handler->_LIN_checkPID
    _processLIN->_LIN_getPacket
    _LIN_getPacket->_memset
    _LIN_startTimer->_TMR0_WriteTimer
    _LIN_queuePacket->_LIN_sendPacket
    _LIN_sendPacket->_LIN_getChecksum
    _LIN_checkPID->_LIN_getFromTable
    _LIN_breakCheck->_EUSART_Read

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _TMR0_ISR->_LIN_timerHandler
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_processLIN
    _LIN_handler->_processLIN
    _processLIN->_LIN_getPacket
    _LIN_queuePacket->_LIN_sendPacket

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_LIN_handler

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6308
               _LIN_Slave_Initialize
                        _LIN_handler
                  _SYSTEM_Initialize
                         _processLIN
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     924
                  _EUSART_Initialize
               _LIN_Slave_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0     150
                                              4 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LIN_Slave_Initialize                                 0     0      0     344
                           _LIN_init
 ---------------------------------------------------------------------------------
 (3) _LIN_init                                             6     2      4     344
                                              4 COMMON     6     2      4
                       _LIN_enableRx
                _LIN_setTimerHandler
                      _LIN_stopTimer
 ---------------------------------------------------------------------------------
 (4) _LIN_setTimerHandler                                  0     0      0     150
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2     150
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     430
                                              4 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      86
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _LIN_handler                                          3     3      0    4366
                                              0 BANK1      3     3      0
                   Absolute function *
                        _EUSART_Read
                 _EUSART_is_rx_ready
                     _LIN_breakCheck
                       _LIN_checkPID
                      _LIN_disableRx
                       _LIN_enableRx
                    _LIN_getChecksum
                   _LIN_getFromTable
                    _LIN_queuePacket
                     _LIN_startTimer
                      _LIN_stopTimer
                             _memset
                         _processLIN *
 ---------------------------------------------------------------------------------
 (1) _processLIN                                          10    10      0     674
                                              2 BANK0     10    10      0
                      _LIN_getPacket
 ---------------------------------------------------------------------------------
 (2) _LIN_getPacket                                        3     3      0     609
                                              9 COMMON     1     1      0
                                              0 BANK0      2     2      0
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               7     3      4     511
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) _LIN_stopTimer                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LIN_startTimer                                       2     2      0      44
                                              3 COMMON     2     2      0
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_WriteTimer                                      1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _LIN_queuePacket                                      7     7      0    1470
                                              2 BANK0      7     7      0
                    _LIN_getChecksum
                     _LIN_sendPacket
 ---------------------------------------------------------------------------------
 (3) _LIN_sendPacket                                       4     3      1     800
                                              8 COMMON     2     1      1
                                              0 BANK0      2     2      0
                       _EUSART_Write
                    _LIN_getChecksum
 ---------------------------------------------------------------------------------
 (4) _LIN_getChecksum                                      6     5      1     469
                                              2 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _LIN_enableRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LIN_disableRx                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LIN_checkPID                                         1     1      0     777
                                              9 COMMON     1     1      0
                     _LIN_calcParity
                   _LIN_getFromTable
 ---------------------------------------------------------------------------------
 (2) _LIN_getFromTable                                     7     6      1     373
                                              2 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (3) _LIN_calcParity                                       3     3      0     338
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _LIN_breakCheck                                       0     0      0      24
                        _EUSART_Read
             _EUSART_get_last_status
 ---------------------------------------------------------------------------------
 (3) _EUSART_get_last_status                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Read                                          2     2      0      24
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0       0
                                              1 COMMON     1     1      0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                   Absolute function *
                   _LIN_timerHandler *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _LIN_timerHandler                                     1     1      0       0
                                              0 COMMON     1     1      0
                    i1_LIN_stopTimer
 ---------------------------------------------------------------------------------
 (9) i1_LIN_stopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (8) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (8) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LIN_Slave_Initialize
     _LIN_init
       _LIN_enableRx
       _LIN_setTimerHandler
         _TMR0_SetInterruptHandler
       _LIN_stopTimer
   _LIN_handler
     Absolute function(Fake) *
     _EUSART_Read *
     _EUSART_is_rx_ready *
     _LIN_breakCheck *
       _EUSART_Read
       _EUSART_get_last_status
     _LIN_checkPID *
       _LIN_calcParity
       _LIN_getFromTable
     _LIN_disableRx *
     _LIN_enableRx *
     _LIN_getChecksum *
     _LIN_getFromTable *
     _LIN_queuePacket *
       _LIN_getChecksum
       _LIN_sendPacket
         _EUSART_Write
         _LIN_getChecksum
     _LIN_startTimer *
       _TMR0_WriteTimer
     _LIN_stopTimer *
     _memset *
     _processLIN *
       _LIN_getPacket
         _memset
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _LIN_Slave_Initialize
       _LIN_init
         _LIN_enableRx
         _LIN_setTimerHandler
           _TMR0_SetInterruptHandler
         _LIN_stopTimer
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _WDT_Initialize
   _processLIN
     _LIN_getPacket
       _memset

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR0_ISR *
     Absolute function(Fake) *
     _LIN_timerHandler *
       i1_LIN_stopTimer
     _TMR0_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      3       D       7       16.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      68      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      68      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 12 22:00:49 2018

                       __end_of_LIN_breakCheck 04FE                  ?_EUSART_SetRxInterruptHandler 0072  
                        __end_of_LIN_getPacket 0400                          ??_LIN_setTimerHandler 0074  
                                            pc 0002                          __end_of_LIN_disableRx 057E  
                                  __CFG_CP$OFF 0000                                _timer0ReloadVal 0060  
                              ?_LIN_calcParity 0070                                    __CFG_LVP$ON 0000  
                                          l310 0387                                            l313 0399  
                                          l256 034D                                            l449 03A6  
                                 __CFG_CPD$OFF 0000                                            u910 0184  
                                          u920 018A                                            u912 0185  
                                          u930 0190                                            u922 018B  
                                          u950 0195                                            u960 019B  
                                          u952 0196                                            u944 0191  
                                          u970 01A1                                            u962 019C  
                                          u990 01A6                                            u992 01A7  
                                          u984 01A2                         ??_EUSART_RxDataHandler 0070  
               ?_EUSART_SetFramingErrorHandler 0072                       __end_of_LIN_getFromTable 02B7  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
               __end_of_EUSART_get_last_status 058E                                   __CFG_IESO$ON 0000  
                        __end_of_scheduleTable 04EF                                           S2255 04A8  
                                 ?_EUSART_Read 0070                                           l2105 01FB  
                                         l2201 0150                                           l2035 0348  
                                         l2107 0210                                           l2123 038A  
                                         l2053 039B                                           l2037 032B  
                                         l2117 0380                                           l2141 0066  
                                         l2133 0057                                           l2215 0169  
                                         l2231 04D8                                           l2049 0422  
                                         l2209 0161                                           l2067 03BA  
                                         l2075 03C0                                           l2155 0093  
                                         l2147 0079                                           l2219 0170  
                                         l2077 03D4                                           l2173 00DA  
                                         l2165 00B6                                           l2157 009A  
                                         l2149 0080                                           l2193 013A  
                                         l2177 00E3                                           l1643 0290  
                                         l1635 0285                                           l2195 0141  
                                         l2187 0117                                           l1653 02AA  
                                         l1637 0267                                           l1813 044D  
                                         l1671 01E6                                           l1655 02B5  
                                         l1647 029D                                           l1639 028A  
                                         l1807 0443                                           l2199 014B  
                                         l1673 01EE                                           l1599 0352  
                                         l1797 04FC                                           u1000 01AC  
                                         u1010 01B2                                           u1002 01AD  
                                         u1110 01D9                                           u1030 01B7  
                                         u1120 01DF                                           u1112 01DA  
                                         u1104 01D5                                           u1040 01BD  
                                         u1032 01B8                                           u1024 01B3  
                                         u1130 01E5                                           u1122 01E0  
                                         u1050 01C3                                           u1042 01BE  
                                         u1150 01ED                                           u1070 01C8  
                                         u1080 01CE                                           u1072 01C9  
                                         u1064 01C4                                           u1090 01D4  
                                         u1082 01CF                                           _LATA 010C  
                                         _LATC 010E                                           u1785 010C  
                                         i1l61 0029                                           i1l53 0010  
                                         i1l56 001E                                           _TMR0 0015  
                                         _WPUA 020C                                           _WPUC 020E  
                               _LIN_sendPacket 03BD                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 04CE  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 002E                                  processLIN@cmd 006D  
                                __CFG_MCLRE$ON 0000                                ?_LIN_breakCheck 0070  
                      __end_of_TMR0_Initialize 04A8                 ??_TMR0_DefaultInterruptHandler 0070  
                                ?_EUSART_Write 0070                 __size_of_OSCILLATOR_Initialize 0007  
                __end_of_OSCILLATOR_Initialize 0539                                          ?_main 0070  
                              LIN_init@command 0074                                  __CFG_WDTE$OFF 0000  
                                        i1l455 041A                                _TMR0_WriteTimer 056F  
                                        _RCREG 0199                                          u162m0 03EF  
                                        u165m0 0243                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISC 008E  
                                        _TXREG 019A                               __end_of_LIN_init 0466  
                        __end_of_LIN_stopTimer 056F                                          _TXSTA 019E  
            __size_of_TMR0_SetInterruptHandler 0006                      ?_TMR0_SetInterruptHandler 0072  
                             __end_of_TMR0_ISR 051A                  __size_of_LIN_Slave_Initialize 000C  
                               _WDT_Initialize 0583                         __end_of_LIN_sendPacket 03DF  
                                        pclath 000A                                 _LIN_startTimer 04FE  
                                        status 0003                                          wtemp0 007E  
                             ?_LIN_getChecksum 0072                    LIN_queuePacket@tempSchedule 0069  
                              __initialization 0030                      __size_of_LIN_timerHandler 000C  
                                 ?_LIN_handler 0070                                   __end_of_main 04DF  
                               ??_EUSART_Write 0072                    ?_INTERRUPT_InterruptManager 0070  
               ??_EUSART_SetRxInterruptHandler 0074                                         ??_main 007A  
                               __CFG_PLLEN$OFF 0000                         __end_of_WDT_Initialize 0587  
                           LIN_sendPacket@data 0078      __end_of_EUSART_DefaultFramingErrorHandler 0597  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0596  
                   _EUSART_OverrunErrorHandler 0051                         __end_of_LIN_startTimer 050C  
                              ?_LIN_sendPacket 0078                                         _ANSELA 018C  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 0591  
                                       _BORCON 0116                                         i1l1971 0316  
                                       i1l1965 0308                                         i1l1975 0324  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                              _LIN_processData 0059                                 __CFG_PWRTE$OFF 0000  
                               __CFG_STVREN$ON 0000                                _LIN_queuePacket 01F0  
                      __end_of_TMR0_WriteTimer 0574                            _EUSART_Transmit_ISR 0400  
                             ?_TMR0_Initialize 0070                                         _memset 041D  
                              ?_WDT_Initialize 0070                               _LIN_rxInProgress 0040  
     TMR0_SetInterruptHandler@InterruptHandler 0072                                ?_LIN_startTimer 0070  
                         ?_EUSART_Transmit_ISR 0070                           __size_of_EUSART_Read 0026  
                            _SYSTEM_Initialize 04BC                        __end_of__initialization 0045  
                           ?_SYSTEM_Initialize 0070                                  ?_LIN_checkPID 0070  
         __end_of_EUSART_SetTxInterruptHandler 0552          __size_of_EUSART_SetTxInterruptHandler 0006  
                 _EUSART_SetTxInterruptHandler 054C                                      ?_LIN_init 0074  
                               __pcstackCOMMON 0070                                  ?_LIN_enableRx 0070  
                             ??_LIN_calcParity 0072                                LIN_sendPacket@i 0063  
                                 __pidataBANK0 0594                            ??_SYSTEM_Initialize 007A  
                                    ?_TMR0_ISR 0070                         LIN_handler@rxDataIndex 003C  
                               _OPTION_REGbits 0095                           _eusartRxStatusBuffer 0020  
                            ?_LIN_getFromTable 0072                         LIN_handler@LIN_rxState 003D  
              ??_EUSART_SetOverrunErrorHandler 0074                             ??_LIN_getFromTable 0073  
                    __end_of_SYSTEM_Initialize 04CE                          ??_EUSART_Transmit_ISR 0070  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                         __end_of_EUSART_Write 03BD                       __size_ofi1_LIN_stopTimer 0005  
                             ??_LIN_breakCheck 0074                                 ??_LIN_checkPID 0079  
                  __end_of_LIN_setTimerHandler 0540                    __size_of_EUSART_Receive_ISR 0032  
                      __end_of_LIN_queuePacket 025C                                 ??_LIN_enableRx 0072  
                                   __pmaintext 04CE                               _LIN_timerHandler 0526  
                                   ??_LIN_init 0078                            LIN_getChecksum@data 0072  
                ?_EUSART_SetTxInterruptHandler 0072               _EUSART_TxDefaultInterruptHandler 005D  
             __end_of_TMR0_SetInterruptHandler 054C                                     ??_TMR0_ISR 0071  
                                   __pintentry 0004                               ?_TMR0_WriteTimer 0070  
                         __size_of_LIN_handler 0132                                        _BAUDCON 019F  
                                      ?_memset 0072                                        _APFCON0 011D  
                                      _APFCON1 011E                   ??_EUSART_DefaultErrorHandler 0071  
                        LIN_getChecksum@length 0074                               _LIN_timerRunning 003F  
                                _eusartRxCount 0039                  __size_of_EUSART_RxDataHandler 0017  
                                      _OSCTUNE 0098                       ??_EUSART_SetErrorHandler 0074  
                       __size_of_LIN_getPacket 0021                         __size_of_LIN_disableRx 0005  
                      LIN_getChecksum@checksum 0076            __size_of_EUSART_DefaultErrorHandler 0003  
                 __end_of_LIN_Slave_Initialize 0526                                __size_of_memset 001A  
                                      __ptext1 04BC                                        __ptext2 0583  
                                      __ptext3 0493                                        __ptext4 047D  
                                      __ptext5 0532                                        __ptext6 051A  
                                      __ptext7 044F                                        __ptext8 0539  
                                      __ptext9 0546                          _OSCILLATOR_Initialize 0532  
                             ??_LIN_sendPacket 0079                       ??_PIN_MANAGER_Initialize 0072  
                   __size_of_SYSTEM_Initialize 0012                                        clrloop0 0541  
                    LIN_getFromTable@rxCommand 0077                           end_of_initialization 0045  
        __end_of_EUSART_SetOverrunErrorHandler 055E         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 0558                                        memset@c 0072  
                                      memset@n 0074                                        memset@p 0077  
                                    _LFRX_Data 00A0                              _EUSART_Initialize 02B7  
                             ?_LIN_queuePacket 0070                             ?_EUSART_Initialize 0070  
                       __size_of_LIN_stopTimer 0005                                      _RCSTAbits 019D  
                            ??i1_LIN_stopTimer 0070                             _EUSART_is_rx_ready 058E  
                                _LIN_getPacket 03DF                                   __pstringtext 04DF  
                                _LIN_disableRx 0579                       ??_EUSART_get_last_status 0072  
                     __size_of_LIN_getChecksum 002A                            ??_EUSART_Initialize 0074  
                             ??_WDT_Initialize 0072                 ??_EUSART_SetTxInterruptHandler 0074  
                            LIN_getPacket@data 0062                       _TMR0_SetInterruptHandler 0546  
                          ?_EUSART_is_rx_ready 0070                                     _processLIN 0377  
                         __end_of_LIN_checkPID 044F                            LIN_init@tableLength 0079  
                             ??_LIN_startTimer 0073                               __CFG_FOSC$INTOSC 0000  
                                    _TRISCbits 008E                          __size_of_EUSART_Write 0023  
                                    _RSSI_Data 004F                           __end_of_LIN_enableRx 0579  
                                _scheduleTable 04DF                __size_of_EUSART_SetErrorHandler 0006  
                    __end_of_EUSART_Initialize 02F5                           ??_EUSART_is_rx_ready 0072  
                                    _TXSTAbits 019E                                  _LIN_rxCommand 0057  
                               ?_LIN_getPacket 0070                                 ?_LIN_disableRx 0070  
                            __size_of_LIN_init 0017             __end_of_EUSART_DefaultErrorHandler 0594  
                   _EUSART_DefaultErrorHandler 0591                                   _EUSART_Write 039A  
                            __size_of_TMR0_ISR 000E                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 0437                            start_initialization 0030  
                                _LIN_stopTimer 056A                       __size_of_TMR0_Initialize 0015  
              __size_of_PIN_MANAGER_Initialize 0016                       __end_of_LIN_timerHandler 0532  
                         _LIN_Slave_Initialize 051A                                  ??_EUSART_Read 0072  
 EUSART_SetRxInterruptHandler@interruptHandler 0072   EUSART_SetTxInterruptHandler@interruptHandler 0072  
                        LIN_startTimer@timeout 0074                      __size_of_LIN_getFromTable 005B  
                            LIN_calcParity@CMD 0073                 ?_EUSART_SetOverrunErrorHandler 0072  
                            LIN_calcParity@PID 0074                     _EUSART_FramingErrorHandler 0053  
                       _EUSART_SetErrorHandler 0564                                    __pdataBANK0 006E  
                                     ??_memset 0076                           processLIN@tempRxData 0065  
              __size_of_EUSART_get_last_status 0003                                    ?_processLIN 0070  
                          LIN_init@processData 0076                    __end_of_EUSART_Transmit_ISR 041D  
                               ?_LIN_stopTimer 0070                                    __pbssCOMMON 007A  
                                    ___latbits 0002                                  __pcstackBANK0 0062  
                                __pcstackBANK1 00A8                              ??_LIN_getChecksum 0073  
                        ?_LIN_Slave_Initialize 0070                     __end_of_EUSART_Receive_ISR 0327  
                   __size_of_EUSART_Initialize 003E               _EUSART_RxDefaultInterruptHandler 005B  
                          __end_of_EUSART_Read 0377                          _TMR0_InterruptHandler 0055  
                                    __pnvBANK0 0051                                      __pnvBANK1 00AB  
                 __end_of_EUSART_RxDataHandler 047D                                ??_LIN_getPacket 0079  
                       _PIN_MANAGER_Initialize 047D                                  ??_LIN_handler 00A8  
                             LIN_getChecksum@i 0075                                ??_LIN_disableRx 0072  
                         EUSART_Read@readValue 0073                           LIN_sendPacket@length 0062  
                 __size_of_LIN_setTimerHandler 0007                          __size_of_LIN_checkPID 0018  
                                 _eusartRxHead 007B                                   _eusartTxHead 003B  
                                 _eusartRxTail 007A                                   _eusartTxTail 003A  
                 ??_INTERRUPT_InterruptManager 0071                                      __pswtext1 04A8  
                        __size_of_LIN_enableRx 0005                        _eusartTxBufferRemaining 005F  
                      __size_of_LIN_calcParity 0075                       __size_of_TMR0_WriteTimer 0005  
                              LIN_checkPID@pid 0079                                i1_LIN_stopTimer 057E  
                               _eusartRxBuffer 0028                         _EUSART_get_last_status 058B  
                            ??_TMR0_Initialize 0074                                 _eusartTxBuffer 0030  
       EUSART_SetErrorHandler@interruptHandler 0072                                       _LATCbits 010E  
                                    clear_ram0 0540                            __size_of_processLIN 0023  
                                     _PIE1bits 0091                              _eusartRxLastError 0038  
                                 _LIN_checkPID 0437            __size_of_INTERRUPT_InterruptManager 002A  
                   ??_TMR0_SetInterruptHandler 0074                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0074                                       _LIN_init 044F  
                                 _LIN_enableRx 0574                                       _TMR0_ISR 050C  
    __end_of_EUSART_DefaultOverrunErrorHandler 058B     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0587                               LIN_getPacket@cmd 0063  
                      __size_of_LIN_breakCheck 000F                            __end_of_LIN_handler 017B  
                              ??_LIN_stopTimer 0072                         ??_LIN_Slave_Initialize 007A  
                                  _EUSART_Read 0351                               _LIN_getFromTable 025C  
                      ??_OSCILLATOR_Initialize 0072                            _EUSART_ErrorHandler 00AB  
                     __size_of_LIN_queuePacket 006C                    ?_EUSART_DefaultErrorHandler 0070  
                      __end_ofi1_LIN_stopTimer 0583                           _EUSART_RxDataHandler 0466  
                                     __ptext10 02B7                                       __ptext11 054C  
                                     __ptext20 056A                                       __ptext12 0552  
                                     __ptext21 04FE                                       __ptext13 0558  
                                     __ptext30 025C                                       __ptext22 056F  
                                     __ptext14 055E                                       __ptext31 017B  
                                     __ptext23 01F0                                       __ptext15 0564  
                                     __ptext40 057E                                       __ptext32 04EF  
                                     __ptext24 03BD                                       __ptext16 0049  
                                     __ptext41 0400                                       __ptext33 058B  
                                     __ptext25 0327                                       __ptext17 0377  
                                     __ptext42 02F5                                       __ptext34 0351  
                                     __ptext26 039A                                       __ptext18 03DF  
                                     __ptext43 0587                                       __ptext35 058E  
                                     __ptext27 0574                                       __ptext19 041D  
                                     __ptext44 0596                                       __ptext28 0579  
                                     __ptext45 0591                                       __ptext37 050C  
                                     __ptext29 0437                                       __ptext46 0466  
                                     __ptext38 0526                                       __ptext39 0595  
                            ?_LIN_timerHandler 0070                                       _led_Data 004E  
                      TMR0_WriteTimer@timerVal 0072                             ??_LIN_timerHandler 0070  
                            ??_TMR0_WriteTimer 0072                        __size_of_LIN_sendPacket 0022  
                  __size_of_EUSART_is_rx_ready 0003                         LIN_getFromTable@length 0076  
                                __size_of_main 0011           __end_of_TMR0_DefaultInterruptHandler 0596  
        __size_of_TMR0_DefaultInterruptHandler 0001                   _TMR0_DefaultInterruptHandler 0595  
                      ?_EUSART_SetErrorHandler 0072                            _LIN_rxCommandLength 0061  
EUSART_SetOverrunErrorHandler@interruptHandler 0072                                    _LIN_handler 0049  
                                     int$flags 007E                                _LIN_getChecksum 0327  
           __end_of_INTERRUPT_InterruptManager 002E                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0564         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 055E                                   ??_processLIN 0064  
                                  _LIN_timeout 006E                                 _LIN_calcParity 017B  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
                                     memset@p1 0078                        __size_of_WDT_Initialize 0004  
                          _LIN_setTimerHandler 0539                                       intlevel1 0000  
                                _CountCallBack 003E                        __size_of_LIN_startTimer 000E  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 056A  
                            __CFG_CLKOUTEN$OFF 0000                          LIN_getFromTable@param 0072  
                           __end_of_processLIN 039A           __end_of_EUSART_SetRxInterruptHandler 0558  
        __size_of_EUSART_SetRxInterruptHandler 0006                   _EUSART_SetRxInterruptHandler 0552  
                ?_TMR0_DefaultInterruptHandler 0070                                     _LIN_packet 0041  
                           _EUSART_Receive_ISR 02F5                           ?_LIN_setTimerHandler 0070  
EUSART_SetFramingErrorHandler@interruptHandler 0072                                 _LIN_breakCheck 04EF  
                       __end_of_LIN_calcParity 01F0                             LIN_queuePacket@cmd 0067  
                                   _OPTION_REG 0095                            ?_EUSART_Receive_ISR 0070  
                              _TMR0_Initialize 0493                                    _UNLOCK_Data 0050  
                            ??_LIN_queuePacket 0064                               ?i1_LIN_stopTimer 0070  
                      ?_EUSART_get_last_status 0070                             EUSART_Write@txData 0073  
                 __size_of_EUSART_Transmit_ISR 001D                 __end_of_PIN_MANAGER_Initialize 0493  
                          LIN_getFromTable@cmd 0075                               LIN_queuePacket@i 0068  
                         ??_EUSART_Receive_ISR 0071                        __end_of_LIN_getChecksum 0351  
